plugins {
  id 'java'
  id 'org.jastadd' version '1.13.3'
}

defaultTasks 'jar'

if (!file('extendj/jastadd_modules').exists()) {
  throw new GradleException('ExtendJ seems to be missing. Please run "git submodule init", then "git submodule update".')
}



jastadd {
  configureModuleBuild()

  modules {
    include("extendj/jastadd_modules") // Include core ExtendJ modules.

    module "intraj", {
      imports "java8 frontend" // ExtendJ dependency for intraj module.

      jastadd {
        basedir "src/jastadd/"
        include "**/*.ast"
        include "**/*.jrag"
      }
    }
  }

  // Target module to build:
  module = 'intraj'
  jastaddOptions = [ "--rewrite=cnta",
                     "--safeLazy",
                     "--cacheCycle=true",
                     "--visitCheck=false",
                     "--optimize-imports"]
  astPackage = 'org.extendj.ast'
  parser.name = 'JavaParser'
  scanner.name = 'OriginalScanner'
}

sourceSets.main {
  java {
    srcDir 'extendj/src/frontend-main'
    srcDir 'src/java'
  }
  resources {
    srcDir 'extendj/src/res'
    srcDir jastadd.buildInfoDir
  }
  repositories {
    mavenLocal()
    flatDir { dirs rootProject.file("tools") }
  }
  dependencies {
    jastadd2 name: "jastadd2"
  }
}

dependencies{
    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'
}

sourceSets.test{
  java{
    srcDir 'src/java/test/'
  }
}

test {
   useJUnit()

  // testLogging.events 'passed', 'failed'

  // testLogging.exceptionFormat = 'full'

  dependsOn 'cleanTest'
}

// Use JavaCompiler if you need bytecode generation.
task intrajbl(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ_BL'
  }
  baseName = 'intraj_bl'
  destinationDir=projectDir
}


task intraj(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ'
  }
  baseName = 'intraj'
  destinationDir=projectDir
}

task intrajdaa(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ_DAA'
  }
  baseName = 'intraj_daa'
  destinationDir=projectDir
}

task intrajcfgdaa(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ_CFGDAA'
  }
  baseName = 'intraj_cfgdaa'
  destinationDir=projectDir
}

task intrajcfg(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ_CFG'
  }
  baseName = 'intraj_cfg'
  destinationDir=projectDir
}

task intrajnpa(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ_NPA'
  }
  baseName = 'intraj_npa'
  destinationDir=projectDir
}

task intrajcfgnpa(type: Jar) {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.output
  manifest {
      attributes 'Main-Class': 'org.extendj.IntraJ_CFGNPA'
  }
  baseName = 'intraj_cfgnpa'
  destinationDir=projectDir
}

artifacts {
    archives intraj, intrajbl, intrajdaa, intrajcfgdaa, intrajcfg, intrajnpa, intrajcfgnpa

}



clean.doFirst {
delete fileTree('./') {
        include '*.jar'
    }
}


// Java -source and -target version.
sourceCompatibility = targetCompatibility = '1.7'

task sourceZip(type: Zip) {
  description 'Builds a Zip file with the entire repisotory (including the ExtendJ submodule).'
  destinationDir = projectDir
  archiveName = "intraj-src.zip"

  from (projectDir) {
    exclude '**/.git'
    exclude '**/.gitignore'
    exclude '**/.gitattributes'
    exclude '**/.gitmodules'
    exclude 'build'
    exclude 'bin'
    exclude '.gradle'
    exclude '.classpath'
    exclude '.settings'
    exclude '.project'
    exclude '*.jar'
    exclude '*.zip'
    exclude '**/*.swp'
  }

  into 'intraj'
}
