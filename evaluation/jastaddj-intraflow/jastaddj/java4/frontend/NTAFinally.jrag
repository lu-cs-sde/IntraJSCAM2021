/* Copyright (c) 2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect NTAFinally {
  /**
   * @return a copy of the block as an NTAFinallyBlock
   */
  protected static NTAFinallyBlock ASTNode.ntaFinallyBlock(FinallyHost origin, Stmt branch, Block block) {
    NTAFinallyBlock ntaBlock = new NTAFinallyBlock(origin);
    ntaBlock.addStmt((Block) block.fullCopy());
    /*if (!block.canCompleteNormally()) {
     * // the target block's exit will replace our own exit code
     * // so we can just goto that block!
     * ntaBlock.addGoto(block);
     * } else ...
     */
    if (block.canCompleteNormally()) {
      FinallyHost enclosing = block.enclosingFinally(branch);
      if (enclosing != null) {
        ntaBlock.addStmt(ntaFinallyBlock(enclosing, branch, enclosing.getFinallyBlock()));
      }
    }
    return ntaBlock;
  }

  syn lazy Opt BreakStmt.getFinallyOpt() {
    return branchFinallyOpt();
  }

  syn lazy Opt ContinueStmt.getFinallyOpt() {
    return branchFinallyOpt();
  }

  syn lazy Opt ReturnStmt.getFinallyOpt() {
    return branchFinallyOpt();
  }

  /**
   * Copy of the finally block for catch-all exception handling.
   */
  syn lazy Block TryStmt.getExceptionHandler() {
    if (hasNonEmptyFinally()) {
      NTAFinallyBlock ntaBlock = new NTAFinallyBlock(this);
      ntaBlock.addStmt((Block) getFinally().fullCopy());
      return ntaBlock;
    } else {
      return new NTAFinallyBlock();
    }
  }

  /**
   * @return An Opt node containing the finally and monitor exit blocks
   * from the list of enclosing try-statements and synchronized blocks.
   */
  public Opt<Block> Stmt.branchFinallyOpt() {
    FinallyHost enclosing = enclosingFinally(this);
    if (enclosing != null) {
      return new Opt<Block>(ntaFinallyBlock(enclosing, this, enclosing.getFinallyBlock()));
    } else {
      return new Opt<Block>();
    }
  }

  private FinallyHost NTAFinallyBlock.origin;

  public NTAFinallyBlock.NTAFinallyBlock(FinallyHost finallyHost) {
    this.origin = finallyHost;
  }
}
