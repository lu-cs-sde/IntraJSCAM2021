/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 *
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect TypeHierarchyCheck {
  inh String Expr.methodHost();
  eq TypeDecl.getChild().methodHost() = typeName();
  eq AbstractDot.getRight().methodHost() = getLeft().type().typeName();
  eq Program.getChild().methodHost() {
    throw new Error("Needs extra equation for methodHost()");
  }
  eq MethodAccess.getChild().methodHost() = unqualifiedScope().methodHost();
  eq ConstructorAccess.getChild().methodHost() = unqualifiedScope().methodHost();

  syn boolean Expr.isUnknown() = type().isUnknown();
  eq PackageAccess.isUnknown() = !hasPackage(packageName());

  public void MethodAccess.nameCheck() {
    if (isQualified() && qualifier().isPackageAccess() && !qualifier().isUnknown()) {
      error("The method " + decl().fullSignature() +
          " can not be qualified by a package name.");
    }
    if (isQualified() && decl().isAbstract() && qualifier().isSuperAccess()) {
      error("may not access abstract methods in superclass");
    }
    if (decls().isEmpty() && (!isQualified() || !qualifier().isUnknown())) {
      StringBuilder sb = new StringBuilder();
      sb.append("no method named " + name());
      sb.append("(");
      for (int i = 0; i < getNumArg(); i++) {
        TypeDecl argType = getArg(i).type();
        if (argType.isVoid()) {
          // error will be reported for the void argument in typeCheck
          // so we return now to avoid confusing double errors
          return;
        }
        if (i != 0) {
          sb.append(", ");
        }
        sb.append(argType.typeName());
      }
      sb.append(")" + " in " + methodHost() + " matches.");
      if (singleCandidateDecl() != null) {
        sb.append(" However, there is a method " + singleCandidateDecl().fullSignature());
      }
      error(sb.toString());
    }
    if (decls().size() > 1) {
      boolean allAbstract = true;
      for(Iterator iter = decls().iterator(); iter.hasNext() && allAbstract; ) {
         MethodDecl m = (MethodDecl)iter.next();
        if(!m.isAbstract() && !m.hostType().isObject())
          allAbstract = false;
      }
      if(!allAbstract && validArgs()) {
        StringBuilder sb = new StringBuilder();
        sb.append("several most specific methods for " + this.prettyPrint() + "\n");
        for(Iterator iter = decls().iterator(); iter.hasNext(); ) {
          MethodDecl m = (MethodDecl)iter.next();
          sb.append("    " + m.fullSignature() + " in " + m.hostType().typeName() + "\n");
        }
        error(sb.toString());
      }

    }
  }

  public void SuperConstructorAccess.nameCheck() {
    super.nameCheck();
    // JLS 5?: 8.8.5.1
    // JLS 7: 8.8.7.1
    TypeDecl c = hostType();
    TypeDecl s = c.isClassDecl() ? ((ClassDecl)c).superclass() : unknownType();
    if (isQualified()) {
      if (!s.isInnerType() || s.inStaticContext()) {
        error("the super type " + s.typeName() + " of " + c.typeName() +
           " is not an inner class");
      } else if (!qualifier().type().instanceOf(s.enclosingType())) {
        error("The type of this primary expression, " +
                qualifier().type().typeName() + " is not enclosing the super type, " +
                s.typeName() + ", of " + c.typeName());
      }
    }
    if (!isQualified() && s.isInnerType()) {
      if (!c.isInnerType()) {
        error("no enclosing instance for " + s.typeName() + " when accessed in " + this.prettyPrint());
      }
    }
    if(s.isInnerType() && hostType().instanceOf(s.enclosingType())) {
      error("cannot reference 'this' before supertype constructor has been called");
    }
  }

  public void SuperAccess.nameCheck() {
    if (isQualified()) {
      if (!hostType().isInnerTypeOf(decl()) && hostType() != decl()) {
        error("qualified super must name an enclosing type");
      }
      if (inStaticContext()) {
        error("*** Qualified super may not occur in static context");
      }
    }
    // 8.8.5.1
    // JLSv7 8.8.7.1
    TypeDecl constructorHostType = enclosingExplicitConstructorHostType();
    if (constructorHostType != null && (constructorHostType == decl())) {
      error("super may not be accessed in an explicit constructor invocation");
    }
    // 8.4.3.2
    if (inStaticContext()) {
      error("super may not be accessed in a static context");
    }
  }

  public void ThisAccess.nameCheck() {
    // 8.8.5.1
    // JLSv7 8.8.7.1
    TypeDecl constructorHostType = enclosingExplicitConstructorHostType();
    if (constructorHostType != null && (constructorHostType == decl())) {
      error("this may not be accessed in an explicit constructor invocation");
    } else if (isQualified()) {
      // 15.8.4
      if (inStaticContext()) {
        error("qualified this may not occur in static context");
      } else if (!hostType().isInnerTypeOf(decl()) && hostType() != decl()) {
        error("qualified this access must name an enclosing type which " +
            decl().typeName() + " is not");
      }
    } else if (!isQualified() && inStaticContext()) {
      // 8.4.3.2
      error("this access may not be used in a static context");
    }
  }

  // 8.8.5.1
  inh boolean VarAccess.inExplicitConstructorInvocation();
  inh boolean MethodAccess.inExplicitConstructorInvocation();
  inh boolean SuperAccess.inExplicitConstructorInvocation();
  inh boolean ThisAccess.inExplicitConstructorInvocation();
  inh boolean ClassInstanceExpr.inExplicitConstructorInvocation();
  inh lazy boolean TypeDecl.inExplicitConstructorInvocation();
  eq Program.getChild().inExplicitConstructorInvocation() = false;

  eq ConstructorAccess.getArg().inExplicitConstructorInvocation() = true;
  eq SuperConstructorAccess.getArg().inExplicitConstructorInvocation() = true;
  eq ConstructorDecl.getConstructorInvocation().inExplicitConstructorInvocation() = true;

  inh TypeDecl SuperAccess.enclosingExplicitConstructorHostType();
  inh TypeDecl ThisAccess.enclosingExplicitConstructorHostType();

  eq Program.getChild().enclosingExplicitConstructorHostType() = null;
  eq ConstructorAccess.getArg().enclosingExplicitConstructorHostType() = hostType();
  eq SuperConstructorAccess.getArg().enclosingExplicitConstructorHostType() = hostType();
  eq ConstructorDecl.getConstructorInvocation().enclosingExplicitConstructorHostType() = hostType();

  inh boolean Expr.inStaticContext(); // SuperAccess, ThisAccess, ClassInstanceExpr, MethodAccess
  inh lazy boolean TypeDecl.inStaticContext();

  eq Program.getChild().inStaticContext() = false;
  eq TypeDecl.getChild().inStaticContext() = isStatic() || inStaticContext();
  eq StaticInitializer.getBlock().inStaticContext() = true;
  eq InstanceInitializer.getBlock().inStaticContext() = false;
  eq FieldDeclaration.getInit().inStaticContext() = isStatic() || hostType().isInterfaceDecl();
  eq MethodDecl.getBlock().inStaticContext() = isStatic();
  eq ConstructorDecl.getBlock().inStaticContext() = false;
  eq ConstructorDecl.getConstructorInvocation().inStaticContext() = false;
  eq MemberClassDecl.getClassDecl().inStaticContext() = false;

  eq ClassInstanceExpr.getTypeDecl().inStaticContext() = isQualified() ?
    qualifier().staticContextQualifier() : inStaticContext();

  syn boolean Expr.staticContextQualifier() = false;
  eq ParExpr.staticContextQualifier() = getExpr().staticContextQualifier();
  eq CastExpr.staticContextQualifier() = getExpr().staticContextQualifier();
  eq AbstractDot.staticContextQualifier() = lastAccess().staticContextQualifier();
  eq TypeAccess.staticContextQualifier() = true;
  eq ArrayTypeAccess.staticContextQualifier() = true;

  public void TypeDecl.typeCheck() {
    // 8.4.6.4 & 9.4.1
    for (Iterator iter1 = localMethodsIterator(); iter1.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter1.next();
      ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;

      for (Iterator i2 = ancestorMethods(m.signature()).iterator(); i2.hasNext(); ) {
        MethodDecl decl = (MethodDecl)i2.next();
        if (m.overrides(decl)) {
          // 8.4.6.1
          if (!m.isStatic() && decl.isStatic()) {
            target.error("an instance method may not override a static method");
          }

          // regardless of overriding
          // 8.4.6.3
          if (!m.mayOverride(decl)) {
            target.error("the return type of method " + m.fullSignature() +
                " in " + m.hostType().typeName() +
                " does not match the return type of method " +
                decl.fullSignature() + " in " + decl.hostType().typeName() +
                " and may thus not be overriden");
          }

          // regardless of overriding
          // 8.4.4
          for (int i = 0; i < m.getNumException(); i++) {
            Access e = m.getException(i);
            boolean found = false;
            for (int j = 0; !found && j < decl.getNumException(); j++) {
              if (e.type().instanceOf(decl.getException(j).type())) {
                found = true;
              }
            }
            if (!found && e.type().isUncheckedException()) {
              target.error(m.fullSignature() + " in " + m.hostType().typeName() +
                  " may not throw more checked exceptions than overridden method " +
                  decl.fullSignature() + " in " + decl.hostType().typeName());
            }
          }
          // 8.4.6.3
          if (decl.isPublic() && !m.isPublic()) {
            target.error("overriding access modifier error");
          }
          // 8.4.6.3
          if (decl.isProtected() && !(m.isPublic() || m.isProtected())) {
            target.error("overriding access modifier error");
          }
          // 8.4.6.3
          if ((!decl.isPrivate() && !decl.isProtected() && !decl.isPublic()) && m.isPrivate()) {
            target.error("overriding access modifier error");
          }
          // regardless of overriding
          if (decl.isFinal()) {
            target.error("method " + m.fullSignature() + " in " +
                hostType().typeName() + " can not override final method " +
                decl.fullSignature() + " in " + decl.hostType().typeName());
          }
        }
        if (m.hides(decl)) {
          // 8.4.6.2
          if(m.isStatic() && !decl.isStatic()) {
            target.error("a static method may not hide an instance method");
          }
          // 8.4.6.3
          if (!m.mayOverride(decl)) {
            target.error("can not hide a method with a different return type");
          }
          // 8.4.4
          for (int i = 0; i < m.getNumException(); i++) {
            Access e = m.getException(i);
            boolean found = false;
            for (int j = 0; !found && j < decl.getNumException(); j++) {
              if (e.type().instanceOf(decl.getException(j).type())) {
                found = true;
              }
            }
            if (!found) {
              target.error("may not throw more checked exceptions than hidden method");
            }
          }
          // 8.4.6.3
          if (decl.isPublic() && !m.isPublic()) {
            target.error("hiding access modifier error: public method " +
                decl.fullSignature() + " in " + decl.hostType().typeName() +
                " is hidden by non public method " + m.fullSignature() + " in " +
                m.hostType().typeName());
          }
          // 8.4.6.3
          if (decl.isProtected() && !(m.isPublic() || m.isProtected())) {
            target.error("hiding access modifier error: protected method " +
                decl.fullSignature() + " in " + decl.hostType().typeName() +
                " is hidden by non (public|protected) method " +
                m.fullSignature() + " in " + m.hostType().typeName());
          }
          // 8.4.6.3
          if ((!decl.isPrivate() && !decl.isProtected() && !decl.isPublic()) && m.isPrivate()) {
            target.error("hiding access modifier error: default method " +
                decl.fullSignature() + " in " + decl.hostType().typeName() +
                " is hidden by private method " + m.fullSignature() + " in " +
                m.hostType().typeName());
          }
          if (decl.isFinal()) {
            target.error("method " + m.fullSignature() + " in " +
                hostType().typeName() + " can not hide final method " +
                decl.fullSignature() + " in " + decl.hostType().typeName());
          }
        }
      }
    }
  }

  syn boolean MethodDecl.mayOverride(MethodDecl m) = type() == m.type();

  public void ClassDecl.nameCheck() {
    super.nameCheck();
    if (hasSuperClass() && !getSuperClass().type().isClassDecl()) {
      error("class may only inherit a class and not " +
          getSuperClass().type().typeName());
    }
    if (isObject() && hasSuperClass()) {
      error("class Object may not have superclass");
    }
    if (isObject() && getNumImplements() != 0) {
      error("class Object may not implement interfaces");
    }

    // 8.1.3
    if (isCircular()) {
      error("circular inheritance dependency in " + typeName());
    }

    // 8.1.4
    HashSet set = new HashSet();
    for (int i = 0; i < getNumImplements(); i++) {
      TypeDecl decl = getImplements(i).type();
      if (!decl.isInterfaceDecl() && !decl.isUnknown()) {
        error("type " + fullName() +
            " tries to implement non interface type " + decl.fullName());
      }
      if (set.contains(decl)) {
        error("type " + decl.fullName() +
            " mentionened multiple times in implements clause");
      }
      set.add(decl);
    }

    for (Iterator iter = interfacesMethodsIterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if (localMethodsSignature(m.signature()).isEmpty()) {
        SimpleSet s = superclass().methodsSignature(m.signature());
        for (Iterator i2 = s.iterator(); i2.hasNext(); ) {
          MethodDecl n = (MethodDecl)i2.next();
          if (n.accessibleFrom(this)) {
            interfaceMethodCompatibleWithInherited(m, n);
          }
        }
        if (s.isEmpty()) {
          for (Iterator i2 = interfacesMethodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
            MethodDecl n = (MethodDecl)i2.next();
            // TODO don't report error twice
            checkAbstractMethodDecls(m, n);
          }
        }
      }
    }
  }

  private void ClassDecl.interfaceMethodCompatibleWithInherited(MethodDecl m, MethodDecl n) {
    if (n.isAbstract()) {
      checkAbstractMethodDecls(m, n);
    }
    if (n.isStatic()) {
      error("Xa static method may not hide an instance method");
    }
    if (!n.isAbstract() && !n.isPublic()) {
      error("Xoverriding access modifier error for " + m.fullSignature() + " in " +
          m.hostType().typeName() + " and " + n.hostType().typeName());
    }
    if (!n.mayOverride(m) && !m.mayOverride(m)) {
      error("Xthe return type of method " +
          m.fullSignature() + " in " + m.hostType().typeName() +
          " does not match the return type of method " + n.fullSignature() + " in "
          + n.hostType().typeName() + " and may thus not be overriden");
    }
    if (!n.isAbstract()) {
      // n implements and overrides method m in the interface
      // may not throw more checked exceptions
      for (int i = 0; i < n.getNumException(); i++) {
        Access e = n.getException(i);
        boolean found = false;
        for (int j = 0; !found && j < m.getNumException(); j++) {
          if (e.type().instanceOf(m.getException(j).type())) {
            found = true;
          }
        }
        if (!found && e.type().isUncheckedException()) {
          error("X" + n.fullSignature() + " in " + n.hostType().typeName() +
              " may not throw more checked exceptions than overridden method " +
              m.fullSignature() + " in " + m.hostType().typeName());
        }
      }
    }
  }

  public void InterfaceDecl.nameCheck() {
    super.nameCheck();
    if (isCircular()) {
      error("circular inheritance dependency in " + typeName());
    } else {
      for(int i = 0; i < getNumSuperInterface(); i++) {
        TypeDecl typeDecl = getSuperInterface(i).type();
        if(typeDecl.isCircular())
          error("circular inheritance dependency in " + typeName());
      }
    }
    for (Iterator<SimpleSet> iter = methodsSignatureMap().values().iterator(); iter.hasNext(); ) {
      SimpleSet set = iter.next();
      if (set.size() > 1) {
        Iterator i2 = set.iterator();
        MethodDecl m = (MethodDecl) i2.next();
        while (i2.hasNext()) {
          MethodDecl n = (MethodDecl)i2.next();
          checkAbstractMethodDecls(m, n);
        }
      }
    }
  }

  /**
   * Error-check two interface method declarations.
   */
  protected void TypeDecl.checkAbstractMethodDecls(MethodDecl m1, MethodDecl m2) {
    if (!m1.mayOverride(m2) && !m2.mayOverride(m1)) {
      StringBuilder err = new StringBuilder();
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      if (host1 != this || host2 != this) {
        err.append("inherited ");
      }
      err.append("method " + m1.fullSignature() + " is multiply declared " +
          "with incompatible return types in " + fullName());
      error(err.toString());
    }
  }
}


