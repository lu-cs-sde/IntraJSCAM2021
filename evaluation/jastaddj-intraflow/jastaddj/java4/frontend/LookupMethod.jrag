/* Copyright (c) 2005-2008, Torbjorn Ekman
 * Copyright (c) 2014, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.*;
import java.util.ArrayList;

aspect LookupMethod {
  inh MethodDecl MethodDecl.unknownMethod();
  inh MethodDecl MethodAccess.unknownMethod();

  syn Expr Access.unqualifiedScope() = isQualified() ? nestedScope() : this;
  inh Expr Access.nestedScope();
  eq AbstractDot.getRight().nestedScope() = isQualified() ? nestedScope() : this;
  eq AbstractDot.getLeft().nestedScope() = isQualified() ? nestedScope() : this;
  eq Program.getChild().nestedScope() { throw new UnsupportedOperationException(); }

  inh Collection Expr.lookupMethod(String name);
  inh Collection Stmt.lookupMethod(String name);
  inh Collection BodyDecl.lookupMethod(String name);
  inh lazy Collection TypeDecl.lookupMethod(String name);

  eq MethodAccess.getArg().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);
  eq ConstructorAccess.getArg().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);
  eq ArrayAccess.getExpr().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);
  eq ArrayTypeWithSizeAccess.getExpr().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);

  eq Program.getChild().lookupMethod(String name) = Collections.EMPTY_LIST;
  eq TypeDecl.getBodyDecl(int i).lookupMethod(String name) = unqualifiedLookupMethod(name);

  syn lazy Collection TypeDecl.unqualifiedLookupMethod(String name) {
    Collection c = memberMethods(name);
    if(!c.isEmpty()) return c;
    if(isInnerType())
      return lookupMethod(name);
    return removeInstanceMethods(lookupMethod(name));
  }

  // in explicit constructor invocation
  eq ConstructorDecl.getConstructorInvocation().lookupMethod(String name) {
    Collection c = new ArrayList();
    for(Iterator iter = lookupMethod(name).iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(!hostType().memberMethods(name).contains(m) || m.isStatic())
        c.add(m);
    }
    return c;
  }
  public static Collection ASTNode.removeInstanceMethods(Collection c) {
    c = new LinkedList(c);
    for(Iterator iter = c.iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(!m.isStatic())
        iter.remove();
    }
    return c;
  }

  eq AbstractDot.getRight().lookupMethod(String name) = getLeft().type().memberMethods(name);

  syn MethodDecl MethodAccess.singleCandidateDecl() {
    MethodDecl result = null;
    for(Iterator iter = lookupMethod(name()).iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(result == null)
        result = m;
      else if(m.getNumParameter() == getNumArg() && result.getNumParameter() != getNumArg())
        result = m;
    }
    return result;
  }

  protected SimpleSet MethodAccess.maxSpecific(Collection candidates) {
    SimpleSet maxSpecific = SimpleSet.emptySet;
    for(Iterator iter = candidates.iterator(); iter.hasNext(); ) {
      MethodDecl decl = (MethodDecl)iter.next();
      if(applicable(decl) && accessible(decl)) {
        if(maxSpecific.isEmpty())
          maxSpecific = maxSpecific.add(decl);
        else {
          if(decl.moreSpecificThan((MethodDecl)maxSpecific.iterator().next()))
            maxSpecific = SimpleSet.emptySet.add(decl);
          else if(!((MethodDecl)maxSpecific.iterator().next()).moreSpecificThan(decl))
            maxSpecific = maxSpecific.add(decl);
        }
      }
    }
    return maxSpecific;
  }

  syn lazy SimpleSet MethodAccess.decls() {
    SimpleSet maxSpecific = maxSpecific(lookupMethod(name()));
    if(isQualified() ? qualifier().staticContextQualifier() : inStaticContext())
      maxSpecific = removeInstanceMethods(maxSpecific);
    return maxSpecific;
  }

  syn lazy MethodDecl MethodAccess.decl() {
    SimpleSet decls = decls();
    if(decls.size() == 1)
      return (MethodDecl)decls.iterator().next();

    // 8.4.6.4 - only return the first method in case of multply inherited abstract methods
    boolean allAbstract = true;
    for(Iterator iter = decls.iterator(); iter.hasNext() && allAbstract; ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(!m.isAbstract() && !m.hostType().isObject())
        allAbstract = false;
    }
    if(decls.size() > 1 && allAbstract)
      return (MethodDecl)decls.iterator().next();
    return unknownMethod();
  }
  private static SimpleSet MethodAccess.removeInstanceMethods(SimpleSet c) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = c.iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(m.isStatic())
        set = set.add(m);
    }
    return set;
  }
}

aspect MethodDecl {
  syn String MethodDecl.name() = getID();

  // 8.4.2
  syn lazy String MethodDecl.signature() {
    StringBuilder sb = new StringBuilder();
    sb.append(name() + "(");
    for (int i = 0; i < getNumParameter(); i++) {
      if (i != 0) {
        sb.append(", ");
      }
      sb.append(getParameter(i).type().typeName());
    }
    sb.append(")");
    return sb.toString();
  }

  /**
   * @return Method signature, including generic parameters.
   */
  syn String MethodDecl.fullSignature() {
    StringBuilder sb = new StringBuilder();
    sb.append(name() + "(");
    for (int i = 0; i < getNumParameter(); i++) {
      if (i != 0) {
        sb.append(", ");
      }
      sb.append(getParameter(i).type().fullName());
    }
    sb.append(")");
    return sb.toString();
  }


  /**
   * 8.4.2 Method Signature
   * @param other
   * @return {@code true} if the signature of this method is same as the
   * the signature of the argument method
   */
  syn boolean MethodDecl.sameSignature(MethodDecl other) =
    signature().equals(other.signature());

  syn lazy boolean MethodDecl.moreSpecificThan(MethodDecl m) {
    if(getNumParameter() == 0)
      return false;
    for(int i = 0; i < getNumParameter(); i++) {
      if(!getParameter(i).type().instanceOf(m.getParameter(i).type()))
        return false;
    }
    return true;
  }

  public boolean MethodAccess.applicable(MethodDecl decl) {
    if(getNumArg() != decl.getNumParameter())
      return false;
    if(!name().equals(decl.name()))
      return false;
    for(int i = 0; i < getNumArg(); i++) {
      if(!getArg(i).type().instanceOf(decl.getParameter(i).type()))
        return false;
    }
    return true;
  }

  syn boolean MethodAccess.accessible(MethodDecl m) {
    if(!isQualified())
      return true;
    if(!m.accessibleFrom(hostType()))
      return false;
    // the method is not accessible if the type is not accessible
    if(!qualifier().type().accessibleFrom(hostType()))
      return false;
    // 6.6.2.1 -  include qualifier type for protected access
    if(m.isProtected() && !m.hostPackage().equals(hostPackage())
        && !m.isStatic() && !qualifier().isSuperAccess()) {
      return hostType().mayAccess(this, m);
    }
    return true;
  }

  /**
   * @return true if the method access may access the method
   */
  public boolean TypeDecl.mayAccess(MethodAccess access, MethodDecl method) {
    if (instanceOf(method.hostType())
        && access.qualifier().type().instanceOf(this))
        return true;

    if (isNestedType())
      return enclosingType().mayAccess(access, method);
    else
      return false;
  }

  syn lazy boolean MethodDecl.overrides(MethodDecl m) =
    !isStatic() && !m.isPrivate() && m.accessibleFrom(hostType()) &&
     hostType().instanceOf(m.hostType()) && m.signature().equals(signature());

  syn lazy boolean MethodDecl.hides(MethodDecl m) =
    isStatic() && !m.isPrivate() && m.accessibleFrom(hostType()) &&
     hostType().instanceOf(m.hostType()) && m.signature().equals(signature());
}

aspect MemberMethods {
  syn Collection<MethodDecl> TypeDecl.memberMethods(String name) {
    Collection<MethodDecl> c = methodsNameMap().get(name);
    if (c != null) {
      return c;
    } else {
      return Collections.emptyList();
    }
  }
  /**
   * @return map from method name to method declarations
   */
  syn lazy Map<String,Collection<MethodDecl>> TypeDecl.methodsNameMap() {
    Map<String,Collection<MethodDecl>> map =
      new HashMap<String,Collection<MethodDecl>>();
    for (Iterator<MethodDecl> iter = methodsIterator(); iter.hasNext(); ) {
      MethodDecl m = iter.next();
      Collection<MethodDecl> methods = map.get(m.name());
      if (methods == null) {
        methods = new ArrayList<MethodDecl>(4);
        map.put(m.name(), methods);
      }
      methods.add(m);
    }
    return map;
  }

  /**
   * Iterate over all local methods in the type.
   * @return method iterator
   */
  public Iterator<MethodDecl> TypeDecl.localMethodsIterator() {
    return new Iterator<MethodDecl>() {
      private Iterator<SimpleSet> outer = localMethodsSignatureMap().values().iterator();
      private Iterator inner = null;
      public boolean hasNext() {
        if ((inner == null || !inner.hasNext()) && outer.hasNext()) {
          inner = outer.next().iterator();
        }
        return inner == null ? false : inner.hasNext();
      }
      public MethodDecl next() {
        return (MethodDecl) inner.next();
      }
      public void remove() { throw new UnsupportedOperationException(); }
    };
  }

  syn SimpleSet TypeDecl.localMethodsSignature(String signature) {
    SimpleSet set = localMethodsSignatureMap().get(signature);
    if (set != null) {
      return set;
    }
    return SimpleSet.emptySet;
  }

  /**
   * @return a mapping of method signature to method declaration
   */
  syn lazy Map<String,SimpleSet> TypeDecl.localMethodsSignatureMap() {
    Map<String,SimpleSet> map = new HashMap<String,SimpleSet>(getNumBodyDecl());
    for (int i = 0; i < getNumBodyDecl(); i++) {
      if (getBodyDecl(i) instanceof MethodDecl) {
        MethodDecl decl = (MethodDecl) getBodyDecl(i);
        map.put(decl.signature(), decl);
      }
    }
    return map;
  }

  /**
   * @return iterator for iterating over all method declarations in implemented
   * interfaces
   */
  public Iterator<MethodDecl> ClassDecl.interfacesMethodsIterator() {
    return new Iterator<MethodDecl>() {
      private Iterator<SimpleSet> outer = interfacesMethodsSignatureMap().values().iterator();
      private Iterator inner = null;
      public boolean hasNext() {
        if ((inner == null || !inner.hasNext()) && outer.hasNext()) {
          inner = outer.next().iterator();
        }
        return inner == null ? false : inner.hasNext();
      }
      public MethodDecl next() {
        return (MethodDecl) inner.next();
      }
      public void remove() { throw new UnsupportedOperationException(); }
    };
  }

  syn SimpleSet ClassDecl.interfacesMethodsSignature(String signature) {
    SimpleSet set = interfacesMethodsSignatureMap().get(signature);
    if (set != null) {
      return set;
    } else {
      return SimpleSet.emptySet;
    }
  }

  // signature -> set of method declarations
  syn lazy Map<String,SimpleSet> ClassDecl.interfacesMethodsSignatureMap() {
    Map<String,SimpleSet> map = new HashMap<String,SimpleSet>();
    for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = iter.next();
      for (Iterator<MethodDecl> i2 = typeDecl.methodsIterator(); i2.hasNext(); ) {
        MethodDecl m = (MethodDecl)i2.next();
        putSimpleSetElement(map, m.signature(), m);
      }
    }
    return map;
  }

  /**
   * Iterate over all member methods in the type.
   * @return method iterator
   */
  public Iterator<MethodDecl> TypeDecl.methodsIterator() {
    return new Iterator<MethodDecl>() {
      private Iterator<SimpleSet> outer = methodsSignatureMap().values().iterator();
      private Iterator inner = null;
      public boolean hasNext() {
        if((inner == null || !inner.hasNext()) && outer.hasNext())
          inner = outer.next().iterator();
        return inner != null ? inner.hasNext() : false;
      }
      public MethodDecl next() {
        return (MethodDecl) inner.next();
      }
      public void remove() { throw new UnsupportedOperationException(); }
    };
  }

  syn SimpleSet TypeDecl.methodsSignature(String signature) {
    SimpleSet set = (SimpleSet)methodsSignatureMap().get(signature);
    if(set != null) return set;
    return SimpleSet.emptySet;
  }

  // signature -> SimpleSet
  syn lazy Map<String,SimpleSet> TypeDecl.methodsSignatureMap() =
    localMethodsSignatureMap();

  eq ClassDecl.methodsSignatureMap() {
    Map<String,SimpleSet> map = new HashMap<String,SimpleSet>(localMethodsSignatureMap());
    if (hasSuperclass()) {
      for (Iterator<MethodDecl> iter = superclass().methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = iter.next();
        if (!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature())) {
          putSimpleSetElement(map, m.signature(), m);
        }
      }
    }
    for (Iterator<TypeDecl> outerIter = interfacesIterator(); outerIter.hasNext(); ) {
      TypeDecl typeDecl = outerIter.next();
      for (Iterator<MethodDecl> iter = typeDecl.methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = iter.next();
        if (!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature())) {
          if (allMethodsAbstract((SimpleSet)map.get(m.signature()))) {
            putSimpleSetElement(map, m.signature(), m);
          }
        }
      }
    }
    return map;
  }

  eq InterfaceDecl.methodsSignatureMap() {
    Map<String,SimpleSet> map = new HashMap<String,SimpleSet>(localMethodsSignatureMap());
    for (Iterator<TypeDecl> outerIter = superinterfacesIterator(); outerIter.hasNext(); ) {
      TypeDecl typeDecl = outerIter.next();
      for (Iterator<MethodDecl> iter = typeDecl.methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if (!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature())) {
          putSimpleSetElement(map, m.signature(), m);
        }
      }
    }
    for (Iterator<MethodDecl> iter = typeObject().methodsIterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if (m.isPublic() && !map.containsKey(m.signature())) {
        putSimpleSetElement(map, m.signature(), m);
      }
    }
    return map;
  }

  /**
   * Utility method to put a SimpleSet-item in a signature map.
   */
  protected static void ASTNode.putSimpleSetElement(Map<String,SimpleSet> map, String key, SimpleSet value) {
    SimpleSet set = map.get(key);
    if (set == null) {
      set = SimpleSet.emptySet;
    }
    map.put(key, set.add(value));
  }

  protected boolean TypeDecl.allMethodsAbstract(SimpleSet set) {
    if (set == null) {
      return true;
    }
    for (Iterator iter = set.iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if (!m.isAbstract()) {
        return false;
      }
    }
    return true;
  }
}

aspect AncestorMethods {
  // methods with the same signature declared in ancestors
  // this is used when checking correct overriding, hiding, and implementation of abstract methods
  syn lazy SimpleSet TypeDecl.ancestorMethods(String signature) = SimpleSet.emptySet;

  eq ClassDecl.ancestorMethods(String signature) {
    SimpleSet set = SimpleSet.emptySet;
    if (hasSuperclass()) {
      for (Iterator iter = superclass().localMethodsSignature(signature).iterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if (!m.isPrivate())
          set = set.add(m);
      }
    }
    if (set.size() != 1 || ((MethodDecl)set.iterator().next()).isAbstract()) {
      for (Iterator iter = interfacesMethodsSignature(signature).iterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        set = set.add(m);
      }
    }
    if (!hasSuperclass()) return set;
    if (set.size() == 1) {
      MethodDecl m = (MethodDecl)set.iterator().next();
      if (!m.isAbstract()) {
        boolean done = true;
        for (Iterator iter = superclass().ancestorMethods(signature).iterator(); iter.hasNext(); ) {
          MethodDecl n = (MethodDecl)iter.next();
          if (n.isPrivate() || !n.accessibleFrom(m.hostType())) {
            done = false;
          }
        }
        if (done) return set;
      }
    }
    for (Iterator iter = superclass().ancestorMethods(signature).iterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      set = set.add(m);
    }
    return set;
  }

  eq InterfaceDecl.ancestorMethods(String signature) {
    SimpleSet set = SimpleSet.emptySet;
    for (Iterator<TypeDecl> outerIter = superinterfacesIterator(); outerIter.hasNext(); ) {
      TypeDecl typeDecl = outerIter.next();
      for (Iterator iter = typeDecl.methodsSignature(signature).iterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        set = set.add(m);
      }
    }
    if (!superinterfacesIterator().hasNext()) {
      for (Iterator iter = typeObject().methodsSignature(signature).iterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if (m.isPublic())
          set = set.add(m);
      }
    }
    return set;
  }
}
