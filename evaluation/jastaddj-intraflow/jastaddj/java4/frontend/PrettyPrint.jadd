/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 *
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect PrettyPrint {

  /**
   * Pretty-print this ASTNode.
   * @return pretty-printed representation of this AST node
   */
  public String ASTNode.prettyPrint() {
    StringBuffer sb = new StringBuffer();
    prettyPrint(sb);
    return sb.toString().trim();
  }

  /**
   * Pretty print this AST node to the StringBuffer.
   * @param sb target for pretty printing
   */
  public void ASTNode.prettyPrint(StringBuffer sb) {
    throw new Error("Operation prettyPrint(StringBuffer) not implemented for " + getClass().getName());
  }


  public String ASTNode.toString() {
    return getClass().getName();
  }

  public void ASTNode.toString(StringBuffer sb) {
    prettyPrint(sb);
  }

  public void Program.prettyPrint(StringBuffer sb) {
    for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit cu = (CompilationUnit) iter.next();
      if (cu.fromSource()) {
        cu.prettyPrint(sb);
      }
    }
  }

  public void CompilationUnit.prettyPrint(StringBuffer sb) {
    try {
      if (!getPackageDecl().equals("")) {
        sb.append("package " + getPackageDecl() + ";\n");
      }
      for (int i = 0; i < getNumImportDecl(); i++) {
        getImportDecl(i).prettyPrint(sb);
      }
      for (int i = 0; i < getNumTypeDecl(); i++) {
        getTypeDecl(i).prettyPrint(sb);
        sb.append("\n");
      }
    } catch (NullPointerException e) {
      System.out.print("Error in compilation unit hosting " + getTypeDecl(0).typeName());
      throw e;
    }
  }

  public void SingleTypeImportDecl.prettyPrint(StringBuffer sb) {
    sb.append("import ");
    getAccess().prettyPrint(sb);
    sb.append(";\n");
  }

  public void TypeImportOnDemandDecl.prettyPrint(StringBuffer sb) {
    sb.append("import ");
    getAccess().prettyPrint(sb);
    sb.append(".*;\n");
  }

  protected void TypeDecl.ppBodyDecls(StringBuffer sb) {
    sb.append(" {");
    for(int i=0; i < getNumBodyDecl(); i++) {
      getBodyDecl(i).prettyPrint(sb);
    }
    sb.append(indent() + "}");
  }

  public void ClassDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);
    sb.append("class " + name());
    if(hasSuperClass()) {
      sb.append(" extends ");
      getSuperClass().prettyPrint(sb);
    }
    if(getNumImplements() > 0) {
      sb.append(" implements ");
      getImplements(0).prettyPrint(sb);
      for(int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).prettyPrint(sb);
      }
    }
    ppBodyDecls(sb);
  }

  public void InterfaceDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);
    sb.append("interface " + name());
    if(getNumSuperInterface() > 0) {
      sb.append(" extends ");
      getSuperInterface(0).prettyPrint(sb);
      for(int i = 1; i < getNumSuperInterface(); i++) {
        sb.append(", ");
        getSuperInterface(i).prettyPrint(sb);
      }
    }
    ppBodyDecls(sb);
  }

  // Type body decl

  public void InstanceInitializer.prettyPrint(StringBuffer sb) {
    if(getBlock().getNumStmt() == 0) return;
    sb.append(indent());
    getBlock().prettyPrint(sb);
  }

  public void StaticInitializer.prettyPrint(StringBuffer sb) {
    if(getBlock().getNumStmt() == 0) return;
    sb.append(indent());
    sb.append("static ");
    getBlock().prettyPrint(sb);
  }

  public void ConstructorDecl.prettyPrint(StringBuffer sb) {
    if(isImplicitConstructor()) return;
    sb.append(indent());
    getModifiers().prettyPrint(sb);
    sb.append(name() + "(");
    if(getNumParameter() > 0) {
      getParameter(0).prettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).prettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).prettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).prettyPrint(sb);
      }
    }

    sb.append(" {");
    if(hasConstructorInvocation()) {
      getConstructorInvocation().prettyPrint(sb);
    }
    for(int i = 0; i < getBlock().getNumStmt(); i++) {
      getBlock().getStmt(i).prettyPrint(sb);
    }
    sb.append(indent());
    sb.append("}");
  }

  public void FieldDeclaration.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);
    getTypeAccess().prettyPrint(sb);
    sb.append(" " + name());
    if(hasInit()) {
      sb.append(" = ");
      getInit().prettyPrint(sb);
    }
    sb.append(";");
  }

  public void VariableDeclaration.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);
    getTypeAccess().prettyPrint(sb);
    sb.append(" " + name());
    if(hasInit()) {
      sb.append(" = ");
      getInit().prettyPrint(sb);
    }
    sb.append(";");
  }

  public void MethodDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);
    getTypeAccess().prettyPrint(sb);
    sb.append(" " + name() + "(");
    if(getNumParameter() > 0) {
      getParameter(0).prettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).prettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).prettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).prettyPrint(sb);
      }
    }
    if(hasBlock()) {
      sb.append(" ");
      getBlock().prettyPrint(sb);
    }
    else {
      sb.append(";");
    }
  }

  public void MemberClassDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getClassDecl().prettyPrint(sb);
  }

  public void MemberInterfaceDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getInterfaceDecl().prettyPrint(sb);
  }

  public void EmptyType.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append(";");
  }

  public void ArrayInit.prettyPrint(StringBuffer sb) {
    sb.append("{ ");
    if(getNumInit() > 0) {
      getInit(0).prettyPrint(sb);
      for(int i = 1; i < getNumInit(); i++) {
        sb.append(", ");
        getInit(i).prettyPrint(sb);
      }
    }
    sb.append(" } ");
  }

  public void ParameterDeclaration.prettyPrint(StringBuffer sb) {
    getModifiers().prettyPrint(sb);
    getTypeAccess().prettyPrint(sb);
    sb.append(" " + name());
  }

  // Assign Expression

  public void AssignExpr.prettyPrint(StringBuffer sb) {
    getDest().prettyPrint(sb);
    sb.append(printOp());
    getSource().prettyPrint(sb);
  }

  syn String AssignExpr.printOp() = " = ";
  eq AssignSimpleExpr.printOp() = " = ";
  eq AssignMulExpr.printOp() = " *= ";
  eq AssignDivExpr.printOp() = " /= ";
  eq AssignModExpr.printOp() = " %= ";
  eq AssignPlusExpr.printOp() = " += ";
  eq AssignMinusExpr.printOp() = " -= ";
  eq AssignLShiftExpr.printOp() = " <<= ";
  eq AssignRShiftExpr.printOp() = " >>= ";
  eq AssignURShiftExpr.printOp() = " >>>= ";
  eq AssignAndExpr.printOp() = " &= ";
  eq AssignXorExpr.printOp() = " ^= ";
  eq AssignOrExpr.printOp()  = " |= ";

  // Literals

  public void Literal.prettyPrint(StringBuffer sb) {
    sb.append(getLITERAL());
  }

  public void StringLiteral.prettyPrint(StringBuffer sb) {
    sb.append("\"" + escape(getLITERAL()) + "\"");
  }

  public void CharacterLiteral.prettyPrint(StringBuffer sb) {
    sb.append("'" + escape(getLITERAL()) + "'");
  }

  public void LongLiteral.prettyPrint(StringBuffer sb) {
    sb.append(getLITERAL());
    sb.append("L");
  }

  public void FloatingPointLiteral.prettyPrint(StringBuffer sb) {
    sb.append(getLITERAL());
    sb.append("F");
  }

  public void DoubleLiteral.prettyPrint(StringBuffer sb) {
    sb.append(getLITERAL());
    sb.append("D");
  }

  protected static String Literal.escape(String str) {
    StringBuffer sb = new StringBuffer();
    for (int i=0; i < str.length(); i++) {
      switch(str.charAt(i)) {
        case '\b': sb.append("\\b"); break;
        case '\t': sb.append("\\t"); break;
        case '\n': sb.append("\\n"); break;
        case '\f': sb.append("\\f"); break;
        case '\r': sb.append("\\r"); break;
        case '\"': sb.append("\\\""); break;
        case '\'': sb.append("\\\'"); break;
        case '\\': sb.append("\\\\"); break;
        default:
          int value = (int)str.charAt(i);
          if (value < 0x20 || (value > 0x7e)) {
            sb.append(asEscape(value));
          } else {
            sb.append(str.charAt(i));
          }
      }
    }
    return sb.toString();
  }

  protected static String Literal.asEscape(int value) {
    StringBuffer sb = new StringBuffer("\\u");
    String hex = Integer.toHexString(value);
    for (int i = 0; i < 4-hex.length(); i++) {
      sb.append("0");
    }
    sb.append(hex);
    return sb.toString();
  }

  public void ParExpr.prettyPrint(StringBuffer sb) {
    sb.append("(");
    getExpr().prettyPrint(sb);
    sb.append(")");
  }

  public void ClassInstanceExpr.prettyPrint(StringBuffer sb) {
    sb.append("new ");
    getAccess().prettyPrint(sb);
    sb.append("(");
    if(getNumArg() > 0) {
      getArg(0).prettyPrint(sb);
      for(int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).prettyPrint(sb);
      }
    }
    sb.append(")");

    if(hasTypeDecl()) {
      TypeDecl decl = getTypeDecl();
      sb.append(" {");
      for(int i = 0; i < decl.getNumBodyDecl(); i++) {
        if(!(decl.getBodyDecl(i) instanceof ConstructorDecl))
          decl.getBodyDecl(i).prettyPrint(sb);
      }
      sb.append(typeDeclIndent());
      sb.append("}");
    }
  }
  inh String ClassInstanceExpr.typeDeclIndent();
  eq Stmt.getChild().typeDeclIndent() = indent();
  eq BodyDecl.getChild().typeDeclIndent() = indent();
  eq Program.getChild().typeDeclIndent() = "";

  public void ArrayCreationExpr.prettyPrint(StringBuffer sb) {
    sb.append("new ");
    getTypeAccess().prettyPrint(sb);
    if(hasArrayInit()) {
      getArrayInit().prettyPrint(sb);
    }
  }

  // Pre and post operations for unary expression

  public void Unary.prettyPrint(StringBuffer sb) {
    sb.append(printPreOp());
    getOperand().prettyPrint(sb);
    sb.append(printPostOp());
  }

  syn String Unary.printPostOp() = "";
  eq PostIncExpr.printPostOp() = "++";
  eq PostDecExpr.printPostOp() = "--";

  syn String Unary.printPreOp() = "";
  eq PreIncExpr.printPreOp() = "++";
  eq PreDecExpr.printPreOp() = "--";
  eq MinusExpr.printPreOp() = "-";
  eq PlusExpr.printPreOp() = "+";
  eq BitNotExpr.printPreOp() = "~";
  eq LogNotExpr.printPreOp() = "!";


  public void CastExpr.prettyPrint(StringBuffer sb) {
    sb.append("(");
    getTypeAccess().prettyPrint(sb);
    sb.append(")");
    getExpr().prettyPrint(sb);
  }

  // Binary Expr

  public void Binary.prettyPrint(StringBuffer sb) {
    getLeftOperand().prettyPrint(sb);
    sb.append(printOp());
    getRightOperand().prettyPrint(sb);
  }

  syn String Binary.printOp();
  eq MulExpr.printOp() = " * ";
  eq DivExpr.printOp() = " / ";
  eq ModExpr.printOp() = " % ";
  eq AddExpr.printOp() = " + ";
  eq SubExpr.printOp() = " - ";
  eq LShiftExpr.printOp() = " << ";
  eq RShiftExpr.printOp() = " >> ";
  eq URShiftExpr.printOp() = " >>> ";
  eq AndBitwiseExpr.printOp() = " & ";
  eq OrBitwiseExpr.printOp() = " | ";
  eq XorBitwiseExpr.printOp() = " ^ ";
  eq AndLogicalExpr.printOp() = " && ";
  eq OrLogicalExpr.printOp() = " || ";
  eq LTExpr.printOp() = " < ";
  eq GTExpr.printOp() = " > ";
  eq LEExpr.printOp() = " <= ";
  eq GEExpr.printOp() = " >= ";
  eq EQExpr.printOp() = " == ";
  eq NEExpr.printOp() = " != ";

  public void InstanceOfExpr.prettyPrint(StringBuffer sb) {
    getExpr().prettyPrint(sb);
    sb.append(" instanceof ");
    getTypeAccess().prettyPrint(sb);
  }

  public void ConditionalExpr.prettyPrint(StringBuffer sb) {
    getCondition().prettyPrint(sb);
    sb.append(" ? ");
    getTrueExpr().prettyPrint(sb);
    sb.append(" : ");
    getFalseExpr().prettyPrint(sb);
  }

  public void Modifiers.prettyPrint(StringBuffer sb) {
    for(int i = 0; i < getNumModifier(); i++) {
      getModifier(i).prettyPrint(sb);
      sb.append(" ");
    }
  }

  public void Modifier.prettyPrint(StringBuffer sb) {
    sb.append(getID());
  }

  public void AbstractDot.prettyPrint(StringBuffer sb) {
    getLeft().prettyPrint(sb);
    if(!nextAccess().isArrayAccess())
      sb.append(".");
    getRight().prettyPrint(sb);
  }

  public void VarAccess.prettyPrint(StringBuffer sb) {
    sb.append(name());
  }

  public void MethodAccess.prettyPrint(StringBuffer sb) {
    sb.append(name());
    sb.append("(");
    if(getNumArg() > 0) {
      getArg(0).prettyPrint(sb);
      for(int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).prettyPrint(sb);
      }
    }
    sb.append(")");
  }

  public void ConstructorAccess.prettyPrint(StringBuffer sb) {
    sb.append(name());
    sb.append("(");
    if(getNumArg() > 0) {
      getArg(0).prettyPrint(sb);
      for(int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).prettyPrint(sb);
      }
    }
    sb.append(")");
  }

  public void TypeAccess.prettyPrint(StringBuffer sb) {
    if(decl().isReferenceType())
      sb.append(nameWithPackage());
    else
      sb.append(decl().name());
  }

  public void ArrayTypeAccess.prettyPrint(StringBuffer sb) {
    getAccess().prettyPrint(sb);
    sb.append("[]");
  }

  public void ArrayTypeWithSizeAccess.prettyPrint(StringBuffer sb) {
    getAccess().prettyPrint(sb);
    sb.append("[");
    getExpr().prettyPrint(sb);
    sb.append("]");
  }

  public void ThisAccess.prettyPrint(StringBuffer sb) {
    sb.append("this");
  }

  public void SuperAccess.prettyPrint(StringBuffer sb) {
    sb.append("super");
  }

  public void PackageAccess.prettyPrint(StringBuffer sb) {
    sb.append(getPackage());
  }

  public void ArrayAccess.prettyPrint(StringBuffer sb) {
    sb.append("[");
    getExpr().prettyPrint(sb);
    sb.append("]");
  }

  public void ClassAccess.prettyPrint(StringBuffer sb) {
    sb.append("class");
  }

  // Stmts

  public void Block.prettyPrint(StringBuffer sb) {
    String indent = indent();
    sb.append(shouldHaveIndent() ? indent : "");
    sb.append("{");
    for(int i = 0; i < getNumStmt(); i++) {
      getStmt(i).prettyPrint(sb);
    }
    sb.append(shouldHaveIndent() ? indent : indent.substring(0, indent.length()-2));
    sb.append("}");
  }

  public void EmptyStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append(";");
  }

  public void LabeledStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append(getLabel() + ":");
    getStmt().prettyPrint(sb);
  }

  public void ExprStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getExpr().prettyPrint(sb);
    sb.append(";");
  }

  public void SwitchStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("switch (");
    getExpr().prettyPrint(sb);
    sb.append(")");
    getBlock().prettyPrint(sb);
  }

  public void ConstCase.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("case ");
    getValue().prettyPrint(sb);
    sb.append(":");
  }

  public void DefaultCase.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("default:");
  }

  public void IfStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("if(");
    getCondition().prettyPrint(sb);
    sb.append(") ");
    getThen().prettyPrint(sb);
    if(hasElse()) {
      sb.append(indent());
      sb.append("else ");
      getElse().prettyPrint(sb);
    }
  }

  public void WhileStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("while(");
    getCondition().prettyPrint(sb);
    sb.append(")");
    getStmt().prettyPrint(sb);
  }

  public void DoStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("do ");
    getStmt().prettyPrint(sb);
    sb.append("while(");
    getCondition().prettyPrint(sb);
    sb.append(");");
  }

  public void ForStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("for(");
    if(getNumInitStmt() > 0) {
      if(getInitStmt(0) instanceof VariableDeclaration) {
        int minDimension = Integer.MAX_VALUE;
        for(int i = 0; i < getNumInitStmt(); i++) {
          VariableDeclaration v = (VariableDeclaration)getInitStmt(i);
          minDimension = Math.min(minDimension, v.type().dimension());
        }
        VariableDeclaration v = (VariableDeclaration)getInitStmt(0);
        v.getModifiers().prettyPrint(sb);
        sb.append(v.type().elementType().typeName());
        for(int i = minDimension; i > 0; i--)
          sb.append("[]");

        for(int i = 0; i < getNumInitStmt(); i++) {
          if(i != 0)
            sb.append(",");
          v = (VariableDeclaration)getInitStmt(i);
          sb.append(" " + v.name());
          for(int j = v.type().dimension() - minDimension; j > 0; j--)
            sb.append("[]");
          if(v.hasInit()) {
            sb.append(" = ");
            v.getInit().prettyPrint(sb);
          }
        }
      }
      else if(getInitStmt(0) instanceof ExprStmt) {
        ExprStmt stmt = (ExprStmt)getInitStmt(0);
        stmt.getExpr().prettyPrint(sb);
        for(int i = 1; i < getNumInitStmt(); i++) {
          sb.append(", ");
          stmt = (ExprStmt)getInitStmt(i);
          stmt.getExpr().prettyPrint(sb);
        }
      }
      else {
        throw new Error("Unexpected initializer in for loop: " + getInitStmt(0));
      }
    }

    sb.append("; ");
    if(hasCondition()) {
      getCondition().prettyPrint(sb);
    }
    sb.append("; ");

    if(getNumUpdateStmt() > 0) {
      ExprStmt stmt = (ExprStmt)getUpdateStmt(0);
      stmt.getExpr().prettyPrint(sb);
      for(int i = 1; i < getNumUpdateStmt(); i++) {
        sb.append(", ");
        stmt = (ExprStmt)getUpdateStmt(i);
        stmt.getExpr().prettyPrint(sb);
      }
    }

    sb.append(") ");
    getStmt().prettyPrint(sb);
  }

  public void BreakStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("break ");
    if(hasLabel())
      sb.append(getLabel());
    sb.append(";");
  }

  public void ContinueStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("continue ");
    if(hasLabel())
      sb.append(getLabel());
    sb.append(";");
  }

  public void ReturnStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("return ");
    if(hasResult()) {
      getResult().prettyPrint(sb);
    }
    sb.append(";");
  }

  public void ThrowStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("throw ");
    getExpr().prettyPrint(sb);
    sb.append(";");
  }

  public void SynchronizedStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("synchronized(");
    getExpr().prettyPrint(sb);
    sb.append(") ");
    getBlock().prettyPrint(sb);
  }

  public void TryStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("try ");
    getBlock().prettyPrint(sb);
    for(int i = 0; i < getNumCatchClause(); i++) {
      sb.append(indent());
      getCatchClause(i).prettyPrint(sb);
    }
    if(hasFinally()) {
      sb.append(indent());
      sb.append("finally ");
      getFinally().prettyPrint(sb);
    }
  }

  public void BasicCatch.prettyPrint(StringBuffer sb) {
    sb.append("catch (");
    getParameter().prettyPrint(sb);
    sb.append(") ");
    getBlock().prettyPrint(sb);
  }

  public void AssertStmt.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("assert ");
    getCondition().prettyPrint(sb);
    if(hasMessage()) {
      sb.append(" : ");
      getMessage().prettyPrint(sb);
    }
    sb.append(";");
  }

  public void LocalClassDeclStmt.prettyPrint(StringBuffer sb) {
    getClassDecl().prettyPrint(sb);
  }

  syn String ASTNode.indent() {
    String indent = extractIndent();
    return indent.startsWith("\n") ? indent : ("\n" + indent);
  }

  syn String ASTNode.extractIndent() {
    if(getParent() == null)
      return "";
    String indent = getParent().extractIndent();
    if(getParent().addsIndentationLevel())
      indent += "  ";
    return indent;
  }

  syn boolean ASTNode.addsIndentationLevel() = false;
  eq TypeDecl.addsIndentationLevel() = true;
  eq BodyDecl.addsIndentationLevel() = true;
  eq MemberTypeDecl.addsIndentationLevel() = false;
  eq Stmt.addsIndentationLevel() = true;
  eq Block.addsIndentationLevel() = shouldHaveIndent();

  syn boolean Block.shouldHaveIndent() =
    getParent() instanceof List && getParent().getParent() instanceof Block;

  // dump the AST to standard output

  public String ASTNode.dumpTree() {
    StringBuffer sb = new StringBuffer();
    dumpTree(sb, 0);
    return sb.toString();
  }

  public void ASTNode.dumpTree(StringBuffer sb, int j) {
    for (int i = 0; i < j; i++) {
      sb.append("  ");
    }
    sb.append(dumpString() + "\n");
    for (int i = 0; i < getNumChild(); i++) {
      getChild(i).dumpTree(sb, j + 1);
    }
  }

  public String ASTNode.dumpTreeNoRewrite() {
    StringBuffer sb = new StringBuffer();
    dumpTreeNoRewrite(sb, 0);
    return sb.toString();
  }
  protected void ASTNode.dumpTreeNoRewrite(StringBuffer sb, int indent) {
    for (int i = 0; i < indent; i++) {
      sb.append("  ");
    }
    sb.append(dumpString());
    sb.append("\n");
    for (int i = 0; i < getNumChildNoTransform(); i++) {
      getChildNoTransform(i).dumpTreeNoRewrite(sb, indent+1);
    }
  }

  syn String ASTNode.dumpString() = getClass().getName();
  eq CompilationUnit.dumpString() = getClass().getName() + " [" + getPackageDecl() + "]";
  eq VarAccess.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq MethodAccess.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq TypeAccess.dumpString() = getClass().getName() + " [" + getPackage() + ", " + getID() + "]";
  eq PrimitiveTypeAccess.dumpString() = getClass().getName() + " [" + getName() + "]";
  eq ArrayTypeAccess.dumpString() = getClass().getName();
  eq PackageAccess.dumpString() = getClass().getName() + " [" + getPackage() + "]";
  eq ParseName.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq PackageOrTypeAccess.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq AmbiguousAccess.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq TypeDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq FieldDeclaration.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq VariableDeclaration.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq ParameterDeclaration.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq MethodDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq Modifier.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq Literal.dumpString() = getClass().getName() + " [" + getLITERAL() + "]";

  eq BoundTypeAccess.dumpString() = getClass().getName() + " [" + getTypeDecl().fullName() + "]";

  public String Program.dumpTree() {
    StringBuffer sb = new StringBuffer();
    for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit cu = (CompilationUnit)iter.next();
      if (cu.fromSource()) {
        sb.append(cu.dumpTree());
      }
    }
    return sb.toString();
  }

  public void BooleanType.prettyPrint(StringBuffer sb) {
    sb.append("boolean");
  }
  public void ByteType.prettyPrint(StringBuffer sb) {
    sb.append("byte");
  }
  public void ShortType.prettyPrint(StringBuffer sb) {
    sb.append("short");
  }
  public void IntType.prettyPrint(StringBuffer sb) {
    sb.append("int");
  }
  public void LongType.prettyPrint(StringBuffer sb) {
    sb.append("long");
  }
  public void CharType.prettyPrint(StringBuffer sb) {
    sb.append("char");
  }
  public void FloatType.prettyPrint(StringBuffer sb) {
    sb.append("float");
  }
  public void DoubleType.prettyPrint(StringBuffer sb) {
    sb.append("double");
  }
  public void NullType.prettyPrint(StringBuffer sb) {
    sb.append("null");
  }
  public void VoidType.prettyPrint(StringBuffer sb) {
    sb.append("void");
  }

}

