/* Copyright (c) 2005-2008, Torbjorn Ekman
 * Copyright (c) 2014, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect GenericMethods {
  public void ParMethodAccess.typeCheck() {
    super.typeCheck();
    if(!decl().hostType().isUnknown()) {
      if(!(decl() instanceof ParMethodDecl))
        error("can not have type parameters on a non generic method");
      else {
        ParMethodDecl m = (ParMethodDecl)decl();
        if(!(m instanceof RawMethodDecl) && m.numTypeParameter() != getNumTypeArgument())
          error("generic method " + m.signature() + " requires " + m.numTypeParameter() + " type arguments");
        else {
        }
      }
    }
  }

  syn lazy final MethodDecl GenericMethodDecl.rawMethodDecl() = lookupParMethodDecl(new ArrayList());

  syn lazy GenericMethodDecl ParMethodDecl.genericMethodDecl() {
    return getGenericMethodDecl();
  }

  syn lazy GenericConstructorDecl ParConstructorDecl.genericConstructorDecl() {
    if(getParent() != null && getParent().getParent() instanceof GenericConstructorDecl)
      return (GenericConstructorDecl)getParent().getParent();
    return null;
  }

  syn nta MethodDecl GenericMethodDecl.lookupParMethodDecl(java.util.List typeArguments) {
    return newParMethodDecl(typeArguments);
  }

  public ParMethodDecl GenericMethodDecl.newParMethodDecl(java.util.List typeArguments) {
    ParMethodDecl methodDecl = typeArguments.isEmpty() ? new RawMethodDecl() : new ParMethodDecl();
    // adding a link to GenericMethodDecl to be used during substitution
    // instead of the not yet existing parent link
    methodDecl.setGenericMethodDecl(this);
    List list = new List();
    if(typeArguments.isEmpty()) {
      GenericMethodDecl original = original();
      for(int i = 0; i < original.getNumTypeParameter(); i++)
        list.add(original.getTypeParameter(i).erasure().createBoundAccess());
    }
    else {
      for(Iterator iter = typeArguments.iterator(); iter.hasNext(); )
        list.add(((TypeDecl)iter.next()).createBoundAccess());
    }
    methodDecl.setTypeArgumentList(list);
    methodDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    methodDecl.setTypeAccess(getTypeAccess().type().substituteReturnType(methodDecl));
    methodDecl.setID(getID());
    methodDecl.setParameterList(getParameterList().substitute(methodDecl));
    methodDecl.setExceptionList(getExceptionList().substitute(methodDecl));
    return methodDecl;
  }


}

aspect TypeCheck {
  // Disable error checking in instantiated generic methods
  public void ParMethodDecl.collectErrors() {
  }

  /**
   * Allows covariant return types.
   * <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.5">JLSv7 8.4.5</a>
   * @param other
   * @return {@code true} if this method is return-type-substitutable for the
   * other declaration
   */
  refine TypeHierarchyCheck eq MethodDecl.mayOverride(MethodDecl m) {
    return type().subtype(m.type());
  }

  /**
   * @param other
   * @return {@code true} if the signature of this method is same as the
   * the signature of the argument method, taking generics into consideration.
   */
  refine LookupMethod eq MethodDecl.sameSignature(MethodDecl other) {
    if (!refined(other)) {
      return false;
    }
    for (int i = 0; i < getNumParameter(); ++i) {
      TypeDecl p1 = getParameter(i).type();
      TypeDecl p2 = other.getParameter(i).type();
      // JLSv7 $8.4.8.1 exception: if one parameter type is raw, then don't check type bounds
      if (p1 != p2 && !p1.isRawType() && !p2.isRawType()) {
        return false;
      }
    }
    return true;
  }

  refine TypeHierarchyCheck protected void TypeDecl.checkAbstractMethodDecls(MethodDecl m1, MethodDecl m2) {

    if (!m1.sameSignature(m2)) {
      error("method declarations " + m1.fullSignature() + " and " +
          m2.fullSignature() + " in interface " + fullName() +
          " are incompatible");
    } else {
      refined(m1, m2);
    }
  }
}

aspect GenericMethodsNameAnalysis {

  eq ParMethodAccess.getTypeArgument().nameType() = NameType.TYPE_NAME;
  eq ParMethodAccess.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);
  eq GenericMethodDecl.getTypeParameter().nameType() = NameType.TYPE_NAME;

  inh SimpleSet GenericMethodDecl.lookupType(String name);
  syn SimpleSet GenericMethodDecl.localLookupType(String name) {
    for(int i = 0; i < getNumTypeParameter(); i++) {
      if(original().getTypeParameter(i).name().equals(name))
        return SimpleSet.emptySet.add(original().getTypeParameter(i));
    }
    return SimpleSet.emptySet;
  }
  eq GenericMethodDecl.getChild().lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);

  eq ParConstructorAccess.getTypeArgument().nameType() = NameType.TYPE_NAME;
  eq ParConstructorAccess.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);
  eq ParSuperConstructorAccess.getTypeArgument().nameType() = NameType.TYPE_NAME;
  eq ParSuperConstructorAccess.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);
  eq GenericConstructorDecl.getTypeParameter().nameType() = NameType.TYPE_NAME;

  inh SimpleSet GenericConstructorDecl.lookupType(String name);
  syn SimpleSet GenericConstructorDecl.localLookupType(String name) {
    for(int i = 0; i < getNumTypeParameter(); i++) {
      if(original().getTypeParameter(i).name().equals(name))
        return SimpleSet.emptySet.add(original().getTypeParameter(i));
    }
    return SimpleSet.emptySet;
  }
  eq GenericConstructorDecl.getChild().lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);

  eq ParClassInstanceExpr.getTypeArgument().nameType() = NameType.TYPE_NAME;
  eq ParClassInstanceExpr.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);

}

aspect GenericMethodsPrettyPrint {

  public void ParMethodAccess.prettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).prettyPrint(sb);
    }
    sb.append(">");
    super.prettyPrint(sb);
  }

  public void ParConstructorAccess.prettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).prettyPrint(sb);
    }
    sb.append(">");
    super.prettyPrint(sb);
  }

  public void ParSuperConstructorAccess.prettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).prettyPrint(sb);
    }
    sb.append(">");
    super.prettyPrint(sb);
  }

  public void ParClassInstanceExpr.prettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).prettyPrint(sb);
    }
    sb.append(">");
    super.prettyPrint(sb);
  }

  private void GenericMethodDecl.ppTypeParameters(StringBuffer sb) {
    sb.append(" <");
    for(int i = 0; i < getNumTypeParameter(); i++) {
      if(i != 0) sb.append(", ");
      original().getTypeParameter(i).prettyPrint(sb);
    }
    sb.append("> ");
  }

  public void GenericMethodDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);

    ppTypeParameters(sb);

    getTypeAccess().prettyPrint(sb);
    sb.append(" " + getID());
    sb.append("(");
    if(getNumParameter() > 0) {
      getParameter(0).prettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).prettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).prettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).prettyPrint(sb);
      }
    }
    if(hasBlock()) {
      sb.append(" ");
      getBlock().prettyPrint(sb);
    }
    else {
      sb.append(";\n");
    }
  }

  public void GenericConstructorDecl.prettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().prettyPrint(sb);

    sb.append(" <");
    for(int i = 0; i < getNumTypeParameter(); i++) {
      if(i != 0) sb.append(", ");
      original().getTypeParameter(i).prettyPrint(sb);
    }
    sb.append("> ");

    sb.append(getID() + "(");
    if(getNumParameter() > 0) {
      getParameter(0).prettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).prettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).prettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).prettyPrint(sb);
      }
    }

    sb.append(" {");
    if(hasConstructorInvocation()) {
      sb.append(indent());
      getConstructorInvocation().prettyPrint(sb);
    }
    for(int i = 0; i < getBlock().getNumStmt(); i++) {
      sb.append(indent());
      getBlock().getStmt(i).prettyPrint(sb);
    }
    sb.append(indent());
    sb.append("}");
  }

}
