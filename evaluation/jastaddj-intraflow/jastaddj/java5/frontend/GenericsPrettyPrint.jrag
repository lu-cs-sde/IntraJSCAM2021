/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 *
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect GenericsPrettyPrint {
  public void TypeVariable.prettyPrint(StringBuffer sb) {
    sb.append(name());
    if (getNumTypeBound() > 0) {
      sb.append(" extends ");
      getTypeBound(0).prettyPrint(sb);
      for (int i = 1; i < getNumTypeBound(); i++) {
        sb.append(" & ");
        getTypeBound(i).prettyPrint(sb);
      }
    }
  }

  public void ParTypeAccess.prettyPrint(StringBuffer sb) {
    getTypeAccess().prettyPrint(sb);
    sb.append("<");
    for (int i = 0; i < getNumTypeArgument(); i++) {
      if (i != 0) {
        sb.append(", ");
      }
      getTypeArgument(i).prettyPrint(sb);
    }
    sb.append(">");
  }

  public void ParClassDecl.prettyPrint(StringBuffer sb) {
    getModifiers().prettyPrint(sb);
    sb.append("class " + getID());
    sb.append('<');
    if (getNumArgument() > 0) {
      getArgument(0).prettyPrint(sb);
      for (int i = 1; i < getNumArgument(); i++) {
        sb.append(", ");
        getArgument(i).prettyPrint(sb);
      }
    }
    sb.append('>');
    if (hasSuperClass()) {
      sb.append(" extends ");
      getSuperClass().prettyPrint(sb);
    }
    if(getNumImplements() > 0) {
      sb.append(" implements ");
      getImplements(0).prettyPrint(sb);
      for(int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).prettyPrint(sb);
      }
    }
    ppBodyDecls(sb);
  }

  private void GenericClassDecl.ppTypeParameters(StringBuffer sb) {
    sb.append('<');
    if (getNumTypeParameter() > 0) {
      getTypeParameter(0).prettyPrint(sb);
      for (int i = 1; i < getNumTypeParameter(); i++) {
        sb.append(", ");
        getTypeParameter(i).prettyPrint(sb);
      }
    }
    sb.append('>');
  }

  public void GenericClassDecl.prettyPrint(StringBuffer sb) {
    getModifiers().prettyPrint(sb);
    sb.append("class " + getID());
    ppTypeParameters(sb);
    if (hasSuperClass()) {
      sb.append(" extends ");
      getSuperClass().prettyPrint(sb);
    }
    if(getNumImplements() > 0) {
      sb.append(" implements ");
      getImplements(0).prettyPrint(sb);
      for(int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).prettyPrint(sb);
      }
    }

    ppBodyDecls(sb);
  }

  public void GenericInterfaceDecl.prettyPrint(StringBuffer sb) {
    getModifiers().prettyPrint(sb);
    sb.append("interface " + getID());
    sb.append('<');
      if (getNumTypeParameter() > 0) {
        getTypeParameter(0).prettyPrint(sb);
        for (int i = 1; i < getNumTypeParameter(); i++) {
          sb.append(", ");
          getTypeParameter(i).prettyPrint(sb);
        }
      }
      sb.append('>');
    if(getNumSuperInterface() > 0) {
      sb.append(" extends ");
      getSuperInterface(0).prettyPrint(sb);
      for(int i = 1; i < getNumSuperInterface(); i++) {
        sb.append(", ");
        getSuperInterface(i).prettyPrint(sb);
      }
    }

    ppBodyDecls(sb);
  }

  public void Wildcard.prettyPrint(StringBuffer sb) {
    sb.append("?");
  }

  public void WildcardExtends.prettyPrint(StringBuffer sb) {
    sb.append("? extends ");
    getAccess().prettyPrint(sb);
  }

  public void WildcardSuper.prettyPrint(StringBuffer sb) {
    sb.append("? super ");
    getAccess().prettyPrint(sb);
  }

}
