/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 *
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect EnhancedForToBytecode {
  // Code generation
  syn lazy int EnhancedForStmt.cond_label() = hostType().constantPool().newLabel();
  syn lazy int EnhancedForStmt.update_label() = hostType().constantPool().newLabel();
  syn lazy int EnhancedForStmt.end_label() = hostType().constantPool().newLabel();

  syn lazy int EnhancedForStmt.extraLocalIndex() = localNum();
  eq EnhancedForStmt.getVariableDeclaration().localNum() = localNum() + (getExpr().type().isArrayDecl() ? 2 : 1);
  eq EnhancedForStmt.getStmt().localNum() = getVariableDeclaration().localNum() + getVariableDeclaration().type().size();

   // EnhancedForStmt can be both break and continue target
  eq EnhancedForStmt.break_label() = end_label();
  eq EnhancedForStmt.continue_label() = update_label();

  syn lazy int EnhancedForStmt.variableScopeEndLabel(CodeGeneration gen) =
    gen.variableScopeLabel();

  public void EnhancedForStmt.createBCode(CodeGeneration gen) {
    VariableDeclaration decl = getVariableDeclaration();
    gen.addLocalVariableEntryAtCurrentPC(decl.name(), decl.type().typeDescriptor(), extraLocalIndex(), variableScopeEndLabel(gen));
    if (getExpr().type().isArrayDecl()) {
      getExpr().createBCode(gen);
      gen.emitStoreReference(extraLocalIndex());
      IntegerLiteral.push(gen, 0);
      gen.emit(Bytecode.ISTORE).add(extraLocalIndex()+1);
      gen.addLabel(cond_label());
      gen.emit(Bytecode.ILOAD).add(extraLocalIndex()+1);
      gen.emitLoadReference(extraLocalIndex());
      gen.emit(Bytecode.ARRAYLENGTH);
      gen.emitCompare(Bytecode.IF_ICMPGE, end_label());
      gen.emitLoadReference(extraLocalIndex());
      gen.emit(Bytecode.ILOAD).add(extraLocalIndex()+1);
      gen.emit(getExpr().type().componentType().arrayLoad());
      getExpr().type().componentType().emitCastTo(gen, getVariableDeclaration().type());
      getVariableDeclaration().type().emitStoreLocal(gen, getVariableDeclaration().localNum());
      getStmt().createBCode(gen);
      gen.addLabel(update_label());
      gen.emit(Bytecode.IINC).add(extraLocalIndex()+1).add(1);
      gen.emitGoto(cond_label());
      gen.addLabel(end_label());
    } else {
      TypeDecl typeIterable = lookupType("java.lang", "Iterable");
      TypeDecl typeIterator = lookupType("java.util", "Iterator");
      MethodDecl iteratorMethod = getMethod(typeIterable, "iterator");
      MethodDecl hasNextMethod = getMethod(typeIterator, "hasNext");
      MethodDecl nextMethod = getMethod(typeIterator, "next");
      getExpr().createBCode(gen);
      iteratorMethod.emitInvokeMethod(gen, typeIterable);
      gen.emitStoreReference(extraLocalIndex());
      gen.addLabel(cond_label());
      gen.emitLoadReference(extraLocalIndex());
      hasNextMethod.emitInvokeMethod(gen, typeIterator);
      gen.emitCompare(Bytecode.IFEQ, end_label());
      gen.emitLoadReference(extraLocalIndex());
      nextMethod.emitInvokeMethod(gen, typeIterator);
      VariableDeclaration obj = getVariableDeclaration();
      if (!obj.type().boxed().isUnknown()) {
        gen.emitCheckCast(obj.type().boxed());
        obj.type().boxed().emitCastTo(gen, obj.type());
        obj.type().emitStoreLocal(gen, obj.localNum());
      } else {
        gen.emitCheckCast(obj.type());
        gen.emitStoreReference(obj.localNum());
      }
      getStmt().createBCode(gen);
      gen.addLabel(update_label());
      gen.emitGoto(cond_label());
      gen.addLabel(end_label());
    }
    gen.addVariableScopeLabel(variableScopeEndLabel(gen));
  }

  /**
   * Finds one method with the given name, and no parameters, in the specified
   * type.
   * @param type type to search for the method declaration
   * @param name name of the method
   * @return method declaration
   */
  protected static MethodDecl ASTNode.getMethod(TypeDecl type, String name) {
    Collection<MethodDecl> methods = (Collection<MethodDecl>) type.memberMethods(name);
    for (MethodDecl method: methods) {
      if (method.getNumParameter() == 0) {
        return method;
      }
    }
    throw new Error("Could not find " + type.typeName() +
        "." + name + "()");
  }
}
