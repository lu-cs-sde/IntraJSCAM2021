2013-10-10  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Removed implicit constructor list rewrites

2014-06-02  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Merged Erik Hogemans Java 8 module.

2014-05-13  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed errors in the Expr.canBeTrue() and Expr.canBeFalse() attributes.
    * The code generator now tries to avoid redundant GOTOs after conditional
    branches.

2014-05-05  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed pretty printing problem for annotation declarations
    (the `@` in `@interface` was omitted)
    * Added -XprettyPrint command-line flag which will cause pretty printing
    of the source files
    * Added -XdumpTree command-line flag which will cause dumping the abstract
    syntax tree of the parsed source files

2014-04-15  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * The ClassDecl.superclass() method now returns non-null values.  In the
    case where the method would previously return null it now returns
    unknownType() instead. The return type was also changed to TypeDecl.

2014-03-06  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Argument files expansion has been improved. Argument files are now
    expanded in-place in the argument list, they may contain comments (`#`)
    and quoted strings, and they can be escaped by a double
    at-sign (`@@file` becomes `@file`).

2014-03-03  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Made conflicting interface method declaration error more descriptive.

2014-02-27  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed annotation-related bytecode generation error.

2014-02-26  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Improved method access type errors -- void type expressions
      as a method argument now has its own error message.
    * Fixed problem in this access and super access error checking
      causing incorrect error messages to be reported for this/super
      accesses in explicit constructor invocations.

2014-02-25  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Source file processing order is now determined by the command line
      argument order.

2014-02-24  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * JastAddJ now reports all semantic errors in all compilation units
    before aborting the compilation
    * Fixed definite assignment analysis problem for assignment expressions.
      Used fix suggested by Erik Hogeman.
    * Fixed definite assignment analysis problem for method accesses.
      Used fix suggested by Erik Hogeman.
    * Fixed errors in effectively final analysis for various expressions.
    * Fixed annotation element type analysis error.

2014-02-23  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Added -debug option to abstract compiler frontend. This option debugs
    extra debug checks during code generation for method binding correctness.

2014-02-22  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Changed final field assignment error messages to be more descriptive

2014-02-21  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Refactored field and variable initializer code generation

2014-02-19  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Removed the `AssignExpr.sourceType()` attribute

2014-02-07  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Added method to initialize an empty ClassPath.

2014-01-16  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Gave instanceof expressions higher precedence than other relational
    expressions. This solves a shift-reduce conflict in the parser grammar and
    still parses all valid relational expressions because relational
    expressions are in practice non-associative.

2014-01-15  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Added `PathPart.getPath()` method which returns the path (to jar, folder
    or file) that the `PathPart` represents.

2014-01-14  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * JastAddJ now gives an error message and fails to compile if something
    not recognized as a valid option or a filename is given on the
    command-line
    * JastAddJ now fails to compile if the output directory does not exist
    * Documented all methods in the `Frontend` class
    * JastAddJ now uses the same exit codes as Javac
    * Deprecated the `Frontend.process` method - will be replaced by
    `Frontend.run` which returns compile error codes.
    * Added `Frontend(String,String)` constructor taking the compiler name and
    version so that it is not necessary to override the `name()` and
    `version()` methods.
    * The `Frontend.processArgs()` method now has return type int, rather than
    void. Returning nonzero from `processArgs()` will abort the compilation
    and cause the compiler to exit with an exit code indicating configuration
    error.

2014-01-13  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Improved performance significantly by adding some caching back into the
    classpath handling code.
    * Renamed `FilePath` to `SourceFilePath`.
    * Added `ClassPath` class which contains classpath configuration. This
    class lazily initializes itself when needed.
    * Replaced `PathPart.packages()` with `PathPart.hasPackage(String)`.
    * `FolderPath` does not scan entire directory structure for packages, only
    polls single directory for each `hasPackage` query.
    * `JarFilePath` caches the package index so that subsequent `hasPackage`
    queries are faster.

2014-01-11  Görel Hedin <gorel.hedin@cs.lth.se>

    * Added option -nowarn for disabling warning messages.

2014-01-07  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed error where some things were not properly pretty-printed in
    semantic error messages
    * Changed the error messages for:
        + imported type conflicting with visible type error
        + method invocation type error (added argument index)
        + qualified this access error (added enclosing type name)

2013-12-19  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Refactored classpath handling. PathPart is now abstract and all concrete
    subtypes are immutable. Classpaths must now be explicitly initialized
    before parsing compilation units by calling Program.initPaths().  This
    means that we can skip checking if the paths should be initialized before
    every type lookup but it also means there is a bigger burden of making
    sure the paths have been properly initialized before parsing.

2013-12-18  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Changed the semantics of TypeDecl.destinationPath and changed where
    JastAddJ generates classfiles to better match the javac behaviour

2013-12-12  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Removed TestServer because it was unused

2013-11-20  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Added ASTNode.prettyPrint() method which will replace toString as the
    pretty-printing method
    * ASTNode.toString() no longer pretty-prints AST nodes

2013-09-06  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Added TokenCounter frontend class

2013-08-30  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * JastAddJ no longer generates JSR/RET bytecode instructions - finally
    blocks are inlined where needed

    * Empty finally blocks do not generate bytcode

    * Added explicit AST node to generate code for the implicit
    monitor exit call for synchronized blocks


2013-08-29  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * JastAddJ now generates classfiles for imported types that are imported
    from source
    * Split src/java directory into src/frontend and src/backend

2013-08-12  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Removed BranchPropagation interface
    * Refactored branch target analysis
    * Removed some `instanceof` use

2013-08-11  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Changed the branchTarget method into an inherited attribute and improved
    its performance. Rather than collecting all branches for each potential
    target statement and testing if any of those is the current branch it
    simply tests the branch statement against each possible target statement
    directly.

2013-08-10  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * The collectFinally method has been replaced by the
    inherited enclosingFinally attribute. All enclosing finally
    hosts can be found by repeatedly evaluating the new attribute.
    This allows lazier evaluation and fixes some problems with the
    old imperative method.

2013-06-04  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Renamed PlaceholderMethodDecl to StandInMethodDecl

2013-06-03  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed annotation bytecode bug affecting Class-valued annotation
    attributes

2013-05-31  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed error that caused single static imports to work like
    on-demand static imports

2013-05-30  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed generic method type inference error
    * Reduced code duplication in Java 7 module by separating some
    aspects into separate files in the Java 4 module

2013-05-25  Jesper Öqvist <jesper@llbit.se>

    * Java support level is now included in the version string given by
    -version

2013-05-22  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Added -profile option to generate profile data

2013-05-19  Jesper Öqvist <jesper@llbit.se>

    * Renamed SuperClassAccess children to SuperClass
    * Renamed SuperInterfaceId child to SuperInterface

2013-05-06  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Refactored AssertStmt: `AssertStmt ::= Condition:Expr [Message:Expr]`

2013-04-12  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Reorganized source tree
    * Merged frontend/backend directories - one module per Java version
    * Added Java 6 module
    * Building of jar files and documentation is handled by toplevel
    Ant script
    * Only one toplevel ReadMe and license file
    * Removed extraneous DiffTask class

2013-02-13  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Version 7.1 released

2013-01-25  Jesper Öqvist <jesper@llbit.se>

    * Removed unused import java.util.LinkedHashSet

2013-01-23  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Moved PathPart and subclasses to separate .jadd file in Java1.4Frontend
    * Improved name checking error messages for TypeDecl
    * Package names are double-checked against canonical file names in
    order to avoid some problems on case-insensitive file systems.
    Trac ticket: http://svn.cs.lth.se/trac/jastadd-trac/ticket/99

2013-01-10  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed error in Java7Frontend/JavaPrettyPrinter.
      Properly escape backslash file separator.

2013-01-07  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Don't add system property `java.class.path` to classpath

2012-11-26  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Version 7.0 released

2012-11-23  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Updated to JastAdd2 version R20121122 (r889)

2012-11-14  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Updated to JastAdd2 version R20121114 (r887)

2012-11-09  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Updated to latest JastAdd2 version

2012-11-06  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * Fixed errors in parser rule for annotations, now it is closer to the JLS.
    Trac ticket: http://svn.cs.lth.se/trac/jastadd-trac/ticket/87

2012-11-02  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * JastAddJ prints an error message and exits with nonzero exit code when
    an unexpected exception occurs
    * Fixed error causing NPE during ParMethodDecl type argument substitution
    Trac ticket: http://svn.cs.lth.se/trac/jastadd-trac/ticket/86

2012-11-01  Jesper Öqvist <jesper.oqvist@cs.lth.se>

    * All type accesses in accessor methods should be qualified
      Trac ticket: http://svn.cs.lth.se/trac/jastadd-trac/ticket/85

2012-09-20 (JO)
    * Modified beaver.Symbol: made the value field non-final and added custom
      clone method. This fixes a "memory leak" when cloning AST nodes.

2012-09-13 (JO)
    * The addSourceFile method now returns the CompilationUnit representing
      the added source file name

2012-09-12 (ES/JO)
    * Applied patch from Emma which fixed a circular type lookup problem
      for generic types. The patch added the new inExtendsOrImplements
      attribute.

2012-07-18 (JO)
    * JastAddJ now uses the relative path to identify compilation units.
      The pathName attribute of compilation units may now be different due to
      this change.
      Using the relative path rather than the absolute path makes it simpler
      for static analysis tools to support relocation between different
      machines.

2012-06-29 (JO)
    * Made field and variable initializer type errors more verbose
    * Fixed error in type lookup that could cause duplicate compilation units
      to be added in the AST (one as a from-source CU, the other as library CU)
      See also http://svn.cs.lth.se/trac/jastadd-trac/ticket/74

2012-05-07 (JO)
    Changed the name of the Java7Backend compiler to JastAddJ (JJ7)

    Changed the name of the Java7Backend generated Jar file to JJ7.jar

2012-05-04 (JO)
    An implementation of createQualifiedAccess was added to AbstractWildcardType
    so that wildcard types do not use the default behaviour of creating a
    qualified type access with package and type name which are undefined for
    wildcard types.

    If a corresponding class file and source file have the same last modified
    timestamp, then the class file will be parsed rather than the source file.

    Final non-static fields now also receive the ConstantValue attribute when
    the value is constant.

    Fixed error that caused faulty bytecode generation when compiling an
    enhanced for statement where the loop variable was a boxed primitive type.

    Fixed definite assignment not propagating to second expression in an
    assert statement.

    Set the ACC_VARARGS flag for variable arity constructors.

2012-05-03 (JO)
    The hostType attribute now always returns the "original" TypeDecl, so for
    example a method in a generic class may be the child of a ParClassDecl but
    hostType will now point to the corresponding GenericClassDecl.
    This fixes an error where extraneous accessor methods were generated for
    some types of method access that did not require an accessor method.

2012-04-26 (JO)
    JastAddJ exits with exit code 0 if it only prints version or help
    information. The version string output by -version was also made shorter.

2012-03-24 (JO)
    Updated to latest JastAdd2 and RagDoll.

2012-03-06 (JO)
    Removed the TypeDecl.subclassWithinBody(TypeDecl) method since the
    purpose of that method was to find an enclosing class inheriting from a
    given superclass C while determining member accessibility.
    Only looking at the directly enclosing subclass of C is not sufficient to
    determine the accessibility of the field or method - all enclsing classes
    must be checked until one that can access the member is found.
    This is the puprpose of the new methods
    TypeDecl.mayAccess(Expr, FieldDeclaration)
    TypeDecl.mayAccess(MethodAccess, MethodDecl)

2012-02-18 (JO)
    Moved the Java7Backend compiler main class to
    org.jastadd.jastaddj.JavaCompiler. A main class with the same name remains
    in the default package, for backwards compatibility.

2011-12-08 (JO)
    Upgraded Beaver to version 0.9.9
    The new version of Beaver uses a new naming convention for the Beaver jar
    files, an effect of this is that the jar file used for Ant tasks is now
    called beaver-ant.jar. Extensions using Beaver in their Ant scripts by
    referencing Java1.4Frontend/tools/beaver.jar should be updated to reference
    Java1.4Frontend/tools/beaver-ant.jar instead.

2011-11-23 (JO)
    Added automatic version number update to build scripts for JJ7.

2011-09-24 (JO)
    Updated the JastAdd2 tool to version R20110924.

2011-09-15 (JO)
    Added isDefaultConstructor flag to ConstructorDecl. Pretty printing
    now ignores auto-generated default constructors. Extensions that rely on
    pretty printing to generate default constructors should refine the
    setDefaultConstructor method to make it do nothing.

2011-06-03 (JO)
    Refactored the Java AST. CatchClause is now an abstract base class
    for BasicCatch, which fills the same role that CatchClause previously had.
    Extensions that use the old CatchClause node type will have to in some
    cases move attribute refines etc. to BasicCatch.

2011-05-12 (JO)
    Modified build files to use more heap memory when running JastAdd2
    using an exec task.

2011-04-01 (JO)
    Errors and warnings are printed on the error stream instead of the
    standard output stream.

2011-08-09 (JO)
    Added build file to root JastAddJ directory with clean target that
    cleans all JastAddJ modules.

2011-08-09 (JO)
    Refactored VariableDeclaration.jrag - moved interface Variable to
    Variable.jadd

