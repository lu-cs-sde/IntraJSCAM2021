aspect ConstructorReference {
	inh ConstructorDecl ConstructorReference.unknownConstructor();
	
	syn lazy ConstructorDecl ClassReference.targetConstructor(FunctionDescriptor f) {
		return syntheticInstanceExpr(f).decl();
	}
	
	syn nta lazy ClassInstanceExpr ClassReference.syntheticInstanceExpr(FunctionDescriptor f) {
		List<Expr> arguments = new List<Expr>();
		for(int i = 0; i < f.method.getNumParameter(); i++) {
			TypeDecl argumentType = f.method.getParameter(i).type();
			arguments.add(new SyntheticTypeAccess(argumentType));
		}
		
		ClassInstanceExpr instanceExpr = null;
		if(hasTypeArgument()) {
			instanceExpr = new ParConstructorReferenceAccess((Access)getTypeAccess().fullCopy(), arguments,
		 											new Opt(), (List<Access>)getTypeArgumentList().fullCopy(), f);
		}
		else {
			// Must check for raw reference type, and in that case infer using diamond (JLS 15.13.1)
			boolean checkDiamond = true;
			if(getTypeAccess().type().hostType() != null && !getTypeAccess().type().isStatic() && getTypeAccess().type().hostType().isRawType())
				checkDiamond = false;
			if(getTypeAccess().type().isRawType() && checkDiamond) {
				DiamondAccess diamond = new DiamondAccess((Access)getTypeAccess().fullCopy());
				instanceExpr = new ConstructorReferenceAccess(diamond, arguments, f);
			}
			else {
				instanceExpr = new ConstructorReferenceAccess((Access)getTypeAccess().fullCopy(), arguments, f);
			}
		}
		return instanceExpr;
	}
	
	// Both array and class references always refer to types
	eq ClassReference.getTypeArgument().nameType() = NameType.TYPE_NAME;
	eq ConstructorReference.getTypeAccess().nameType() = NameType.TYPE_NAME;
	
	syn lazy boolean ConstructorReference.congruentTo(FunctionDescriptor f);
	
	eq ClassReference.congruentTo(FunctionDescriptor f) {
		ConstructorDecl decl = targetConstructor(f);
		if(unknownConstructor() == decl)
			return false;
		if(!f.method.type().isVoid()) {
			TypeDecl returnType = syntheticInstanceExpr(f).type();
			if(!returnType.assignConversionTo(f.method.type(), null))
				return false;
		}
		return true;
	}
	
	eq ArrayReference.congruentTo(FunctionDescriptor f) {
		if(f.method.getNumParameter() != 1) 
			return false;
		if(!f.method.getParameter(0).type().assignConversionTo(f.fromInterface().typeInt(), null))
			return false;
		if(!f.method.type().isVoid()) {
			if(!getTypeAccess().type().assignConversionTo(f.method.type(), null))
				return false;
		}
		return true;
	}
	
	
	syn lazy ArrayList<ConstructorDecl> ClassReference.potentiallyApplicableConstructors(FunctionDescriptor f) {
		TypeDecl classType = syntheticInstanceExpr(f).type();
		Collection<ConstructorDecl> col = classType.constructors();
		ArrayList<ConstructorDecl> applicable = new ArrayList<ConstructorDecl>();
		for(ConstructorDecl decl : col) {
			if(!decl.accessibleFrom(hostType()))
				continue;
			if(!(decl.arity() == f.method.arity()))
				continue;
			if(hasTypeArgument()) {
				if(!(decl instanceof GenericConstructorDecl))
					continue;
				GenericConstructorDecl genDecl = (GenericConstructorDecl)decl;
				if(!(getNumTypeArgument() == genDecl.getNumTypeParameter()))
					continue;
			}	
			applicable.add(decl);
		}
		return applicable;
	}
	
	// 15.13.1
	syn lazy boolean ConstructorReference.isExact();
	
	syn lazy ConstructorDecl ClassReference.exactCompileTimeDeclaration() {
		if(getTypeAccess().type().isRawType()) {
			if(getTypeAccess().type().hostType() == null || getTypeAccess().type().isStatic() 
			 			|| getTypeAccess().type().hostType().isRawType())
				return unknownConstructor();
		}
		TypeDecl classType = getTypeAccess().type();
		Collection<ConstructorDecl> col = classType.constructors();
		ArrayList<ConstructorDecl> applicable = new ArrayList<ConstructorDecl>();
		int foundCompatible = 0;
		ConstructorDecl latestDecl = null;
		
		for(ConstructorDecl decl : col) {
			if(decl.accessibleFrom(hostType())) {
				foundCompatible++;
				latestDecl = decl;
			}
		}
		if(foundCompatible != 1)
			return unknownConstructor();
		if(latestDecl.isVariableArity())
			return unknownConstructor();
		if(latestDecl instanceof GenericConstructorDecl) {
			GenericConstructorDecl genericDecl = (GenericConstructorDecl)latestDecl;
			if(getNumTypeArgument() == genericDecl.getNumTypeParameter()) {
				return latestDecl;
			}
			else {
				return unknownConstructor();
			}
		}
		return latestDecl;
	}
	
	eq ClassReference.isExact() {
		return exactCompileTimeDeclaration() != unknownConstructor();
	}
	
	eq ArrayReference.isExact() = true;	
}