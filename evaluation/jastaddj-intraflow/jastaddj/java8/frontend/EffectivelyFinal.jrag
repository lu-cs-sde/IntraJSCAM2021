
aspect PreciseRethrow {
	inh boolean InferredParameterDeclaration.inhModifiedInScope(Variable var);
	inh boolean LambdaParameters.inhModifiedInScope(Variable var);
	inh boolean VariableDeclaration.inhModifiedInScope(Variable var);
	
	eq LambdaExpr.getLambdaParameters().inhModifiedInScope(Variable var) = modifiedInScope(var);
	eq DeclaredLambdaParameters.getParameter().inhModifiedInScope(Variable var) = inhModifiedInScope(var);
	eq InferredLambdaParameters.getParameter().inhModifiedInScope(Variable var) = inhModifiedInScope(var);
	
	syn boolean BodyDecl.modifiedInScope(Variable var);
	syn boolean TypeDecl.modifiedInScope(Variable var);
	
	syn boolean LambdaBody.modifiedInScope(Variable var);
	eq LambdaExpr.modifiedInScope(Variable var) = getLambdaBody().modifiedInScope(var);
	eq BlockLambdaBody.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
	eq ExprLambdaBody.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);
	
	//MAYBE REMOVE THIS LATER
	inh boolean CatchParameterDeclaration.inhModifiedInScope(Variable var);
	eq MultiCatch.getParameter().inhModifiedInScope(Variable var) = getBlock().modifiedInScope(var);
	
	eq EnhancedForStmt.getVariableDeclaration().inhModifiedInScope(Variable var) = modifiedInScope(var);
	eq EnhancedForStmt.getStmt().inhModifiedInScope(Variable var) = false;
	eq Block.getStmt().inhModifiedInScope(Variable var) = modifiedInScope(var);
	eq IfStmt.getThen().inhModifiedInScope(Variable var) = false;
	eq IfStmt.getElse().inhModifiedInScope(Variable var) = false;
	eq WhileStmt.getStmt().inhModifiedInScope(Variable var) = false;
	eq DoStmt.getStmt().inhModifiedInScope(Variable var) = false;
	eq ForStmt.getInitStmt().inhModifiedInScope(Variable var) = modifiedInScope(var);
	eq ForStmt.getUpdateStmt().inhModifiedInScope(Variable var) = modifiedInScope(var);
	eq ForStmt.getStmt().inhModifiedInScope(Variable var) = false;
	
	eq ConstructorDecl.getConstructorInvocation().inhModifiedInScope(Variable var) = false;
	
	
	refine PreciseRethrow 
	eq ParameterDeclaration.throwTypes() {
		if (isCatchParam() && (isFinal() || isEffectivelyFinal())) {
			// the catch parameter must be final or implicitly
			// final (multi-catch)
			return catchClause().caughtExceptions();
		} else {
			Collection<TypeDecl> tts = new LinkedList<TypeDecl>();
			tts.add(type());
			return tts;
		}
	}
    
    eq BodyDecl.modifiedInScope(Variable var) = false;
    eq ConstructorDecl.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
    eq InstanceInitializer.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
    eq StaticInitializer.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
    
    refine PreciseRethrow
    eq LocalClassDeclStmt.modifiedInScope(Variable var) = getClassDecl().modifiedInScope(var);
    eq MemberClassDecl.modifiedInScope(Variable var) = getClassDecl().modifiedInScope(var);
    eq MemberInterfaceDecl.modifiedInScope(Variable var) = getInterfaceDecl().modifiedInScope(var);
    eq MethodDecl.modifiedInScope(Variable var) = getBlock().modifiedInScope(var); 
    
    eq TypeDecl.modifiedInScope(Variable var) {
    	for(int i = 0; i < getNumBodyDecl(); i++) {
    		BodyDecl body = getBodyDecl(i);
    		if(body.modifiedInScope(var))
    			return true;
    	}
    	return false;
    }
	
	eq ArrayAccess.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);
	
	refine PreciseRethrow
	eq AbstractDot.modifiedInScope(Variable var) = 
		getLeft().modifiedInScope(var) || getRight().modifiedInScope(var);
	
	eq PostIncExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
	eq PostDecExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
	eq PreIncExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
	eq PreDecExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
	
	refine PreciseRethrow
	eq ClassInstanceExpr.modifiedInScope(Variable var) {
		for (int i = 0; i < getNumArg(); ++i) {
			if (getArg(i).modifiedInScope(var)) {
				return true;
			}
		}
		if(hasTypeDecl())
			return getTypeDecl().modifiedInScope(var);
		else
			return false;
	}
	
	refine PreciseRethrow
	eq ConstructorDecl.getParameter().inhModifiedInScope(Variable var) {
		return getBlock().modifiedInScope(var) || getConstructorInvocation().modifiedInScope(var);
	}
	
	refine PreciseRethrow
	eq AssignExpr.modifiedInScope(Variable var) {
		boolean isLeft = getDest().isVariable(var);
		if(isLeft && var instanceof VariableDeclaration) {
			VariableDeclaration decl = (VariableDeclaration)var;
			if(!decl.hasInit()) {
				//Variable is being written to in an inner class
				if(decl.hostType() != hostType())
					return true;
				// 4.12.4;
				return !getSource().isDUafter(var);
			}
			return true;
		}
		else {
			return isLeft || getSource().modifiedInScope(var);
		}
    }
}

aspect EffectivelyFinal {
	//4.12.4
	syn lazy boolean InferredParameterDeclaration.isEffectivelyFinal() = !isFinal() && !inhModifiedInScope(this);
	syn lazy boolean FieldDeclaration.isEffectivelyFinal() = false;
	
	//14.20
	syn lazy boolean CatchParameterDeclaration.isEffectivelyFinal() = false;
	
	//4.12.4
	syn lazy boolean VariableDeclaration.isEffectivelyFinal() {
		return !isFinal() && !inhModifiedInScope(this);
	}
	
	//4.12.4
	refine PreciseRethrow
	eq ParameterDeclaration.isEffectivelyFinal() = !isFinal() && !inhModifiedInScope(this);
} 