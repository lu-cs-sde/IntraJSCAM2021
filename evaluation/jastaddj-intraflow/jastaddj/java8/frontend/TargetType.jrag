
aspect TargetType {
	inh lazy TypeDecl Expr.targetType();
	
	eq Program.getChild().targetType() = typeNull();
	
	eq ConditionalExpr.getTrueExpr().targetType() = targetType();
	eq ConditionalExpr.getFalseExpr().targetType() = targetType();
	eq AbstractDot.getRight().targetType() = targetType();
	eq ParExpr.getExpr().targetType() = targetType();
	eq AssignExpr.getSource().targetType() = getDest().type();
	eq VariableDeclaration.getInit().targetType() = getTypeAccess().type();
	eq FieldDeclaration.getInit().targetType() = getTypeAccess().type();
	eq ReturnStmt.getResult().targetType() = returnType();
	eq CastExpr.getExpr().targetType() = type();
	
	eq AddExpr.getLeftOperand().targetType() {
		if(getLeftOperand().stringContext())
			return getRightOperand().type();
		else if(!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression())
			return type();
		else 
			return targetType();
	}
	eq AddExpr.getRightOperand().targetType() {
		if(getRightOperand().stringContext())
			return getLeftOperand().type();
		else if(!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression())
			return type();
		else 
			return targetType();
	}
	
	eq ArithmeticExpr.getLeftOperand().targetType() {
		if(!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression())
			return type();
		else
			return targetType();
	}
	
	eq ArithmeticExpr.getRightOperand().targetType() {
		if(!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression())
			return type();
		else
			return targetType();
	}
	
	eq ArrayInit.getInit().targetType() {
		if(!(targetType() instanceof ArrayDecl)) {
			return targetType();
		}
		else {
			return ((ArrayDecl)targetType()).componentType();
		}
	}
	
	eq MethodAccess.getArg(int i).targetType() {
		MethodDecl decl = decl();
		if(decl.unknownMethod() == decl)
			return decl.type().unknownType();
		
		if(decl.isVariableArity() && i >= decl.arity() - 1) {
			return decl.getParameter(decl.arity() - 1).type().componentType();
		}
		else 
			return decl.getParameter(i).type();
	}
	
	eq ConstructorAccess.getArg(int i).targetType() {
		ConstructorDecl decl = decl();
		if(unknownConstructor() == decl)
			return decl.type().unknownType();
		
		if(decl.isVariableArity() && i >= decl.arity() - 1) {
			return decl.getParameter(decl.arity() - 1).type().componentType();
		}
		else
			return decl.getParameter(i).type();
	}
	
	eq ClassInstanceExpr.getArg(int i).targetType() {
		ConstructorDecl decl = decl();
		if(unknownConstructor() == decl)
			return decl.type().unknownType();
		
		if(decl.isVariableArity() && i >= decl.arity() - 1) {
			return decl.getParameter(decl.arity() - 1).type().componentType();
		}
		else
			return decl.getParameter(i).type();
	}
	
	eq ExprLambdaBody.getExpr().targetType() {
		TypeDecl decl = enclosingLambda().targetType();
		if(decl.isNull())
			return unknownType();
		else if(!(decl instanceof InterfaceDecl))
			return unknownType();
		else {
			InterfaceDecl iDecl = (InterfaceDecl)decl;
			if(!iDecl.isFunctional())
				return unknownType();
			else {
				return iDecl.functionDescriptor().method.type();
			}
		}
	}
	
	syn lazy InterfaceDecl LambdaExpr.targetInterface() {
		if(targetType().isNull())
			return null;
		else if(!(targetType() instanceof InterfaceDecl))
			return null;
		else 
			return (InterfaceDecl)targetType();
	}
	
	syn lazy InterfaceDecl MethodReference.targetInterface() {
		if(targetType().isNull())
			return null;
		else if(!(targetType() instanceof InterfaceDecl))
			return null;
		else 
			return (InterfaceDecl)targetType();
	}
	
	syn lazy InterfaceDecl ConstructorReference.targetInterface() {
		if(targetType().isNull())
			return null;
		else if(!(targetType() instanceof InterfaceDecl))
			return null;
		else 
			return (InterfaceDecl)targetType();
	}
	
	
	// This is required for type inference to work with method references
	syn lazy TypeDecl MethodReferenceAccess.assignConvertedType() {
		return targetDescriptor.method.type();
	}
	
	syn lazy TypeDecl ParMethodReferenceAccess.assignConvertedType() {
		return targetDescriptor.method.type();
	}
	
	eq ExprMethodReference.toClass().assignConvertedType() {
		return targetInterface().functionDescriptor().method.type();
	}
	
	eq TypeMethodReference.toClass().assignConvertedType() {
		return targetInterface().functionDescriptor().method.type();
	}
	
	// Required for diamond type inference to work
	eq ClassInstanceExpr.getAccess().assignConvertedType() = targetType();
	
	syn lazy TypeDecl ConstructorReferenceAccess.targetType() {
		return targetDescriptor.method.type();
	}
	
	syn lazy TypeDecl ParConstructorReferenceAccess.targetType() {
		return targetDescriptor.method.type();
	}
	
	eq ConstructorReferenceAccess.getAccess().targetType() {
		return targetDescriptor.method.type();
	}
	
	eq ClassReference.toClass().targetType() {
		return targetInterface().functionDescriptor().method.type();
	}
}


aspect Contexts {
	// Ch 5
	inh lazy boolean Expr.assignmentContext();
	inh lazy boolean Expr.invocationContext();
	inh lazy boolean Expr.castContext();
	inh lazy boolean Expr.stringContext();
	inh lazy boolean Expr.numericContext();
	
	eq CompilationUnit.getImportDecl().assignmentContext() = false;
	eq CompilationUnit.getImportDecl().invocationContext() = false;
	eq CompilationUnit.getImportDecl().castContext() = false;
	eq CompilationUnit.getImportDecl().stringContext() = false;
	eq CompilationUnit.getImportDecl().numericContext() = false;
	
	eq CompilationUnit.getTypeDecl().assignmentContext() = false;
	eq CompilationUnit.getTypeDecl().invocationContext() = false;
	eq CompilationUnit.getTypeDecl().castContext() = false;
	eq CompilationUnit.getTypeDecl().stringContext() = false;
	eq CompilationUnit.getTypeDecl().numericContext() = false;
	
	eq AnnotatedCompilationUnit.getModifiers().assignmentContext() = false;
	eq AnnotatedCompilationUnit.getModifiers().invocationContext() = false;
	eq AnnotatedCompilationUnit.getModifiers().castContext() = false;
	eq AnnotatedCompilationUnit.getModifiers().stringContext() = false;
	eq AnnotatedCompilationUnit.getModifiers().numericContext() = false;
	
	eq ExprLambdaBody.getExpr().assignmentContext() = true;
	eq ExprLambdaBody.getExpr().invocationContext() = false;
	eq ExprLambdaBody.getExpr().castContext() = false;
	eq ExprLambdaBody.getExpr().stringContext() = false;
	eq ExprLambdaBody.getExpr().numericContext() = false;
	
	eq BlockLambdaBody.getBlock().assignmentContext() = false;
	eq BlockLambdaBody.getBlock().invocationContext() = false;
	eq BlockLambdaBody.getBlock().castContext() = false;
	eq BlockLambdaBody.getBlock().stringContext() = false;
	eq BlockLambdaBody.getBlock().numericContext() = false;
	
	eq Binary.getLeftOperand().assignmentContext() = false;
	eq Binary.getRightOperand().assignmentContext() = false;
	eq Binary.getLeftOperand().invocationContext() = false;
	eq Binary.getRightOperand().invocationContext() = false;
	eq Binary.getLeftOperand().castContext() = false;
	eq Binary.getRightOperand().castContext() = false;
	eq Binary.getLeftOperand().stringContext() = false;
	eq Binary.getRightOperand().stringContext() = false;
	eq Binary.getLeftOperand().numericContext() = false;
	eq Binary.getRightOperand().numericContext() = false;
	
	eq AddExpr.getLeftOperand().stringContext() {
		if(!getRightOperand().isPolyExpression() && !getLeftOperand().isPolyExpression()) {
			if(getRightOperand().type().isString() && !getLeftOperand().type().isString())
				return true;
		}
		return false;
	}
	eq AddExpr.getRightOperand().stringContext() {
		if(!getRightOperand().isPolyExpression() && !getLeftOperand().isPolyExpression()) {
			if(getLeftOperand().type().isString() && !getRightOperand().type().isString())
				return true;
		}
		return false;
	}
	
	eq ArithmeticExpr.getRightOperand().numericContext() = true;
	eq ArithmeticExpr.getLeftOperand().numericContext() = true;
	
	eq Unary.getOperand().assignmentContext() = false;
	eq Unary.getOperand().invocationContext() = false;
	eq Unary.getOperand().castContext() = false;
	eq Unary.getOperand().stringContext() = false;
	eq Unary.getOperand().numericContext() = false;
	
	eq InstanceOfExpr.getExpr().assignmentContext() = false;
	eq InstanceOfExpr.getExpr().invocationContext() = false;
	eq InstanceOfExpr.getExpr().castContext() = false;
	eq InstanceOfExpr.getExpr().stringContext() = false;
	eq InstanceOfExpr.getExpr().numericContext() = false;
	
	eq ConditionalExpr.getCondition().assignmentContext() = false;
	eq ConditionalExpr.getCondition().invocationContext() = false;
	eq ConditionalExpr.getCondition().castContext() = false;
	eq ConditionalExpr.getCondition().numericContext() = false;
	eq ConditionalExpr.getCondition().stringContext() = false;
	
	
	eq ConditionalExpr.getTrueExpr().assignmentContext() = isPolyExpression() ? assignmentContext() : false;
	eq ConditionalExpr.getTrueExpr().invocationContext() = isPolyExpression() ? invocationContext() : false;
	// 15.25.3
	eq ConditionalExpr.getTrueExpr().castContext() = false;
	eq ConditionalExpr.getTrueExpr().stringContext() = false;
	eq ConditionalExpr.getTrueExpr().numericContext() = false;
	eq ConditionalExpr.getFalseExpr().assignmentContext() = isPolyExpression() ? assignmentContext() : false;
	eq ConditionalExpr.getFalseExpr().invocationContext() = isPolyExpression() ? invocationContext() : false;
	// 15.25.3
	eq ConditionalExpr.getFalseExpr().castContext() = false;
	eq ConditionalExpr.getFalseExpr().stringContext() = false;
	eq ConditionalExpr.getFalseExpr().numericContext() = false;
	
	eq ArrayAccess.getExpr().assignmentContext() = false;
	eq ArrayAccess.getExpr().invocationContext() = false;
	eq ArrayAccess.getExpr().castContext() = false;
	eq ArrayAccess.getExpr().stringContext() = false;
	eq ArrayAccess.getExpr().numericContext() = false;
	
	eq AbstractDot.getRight().assignmentContext() = assignmentContext();
	eq AbstractDot.getRight().invocationContext() = invocationContext();
	eq AbstractDot.getRight().castContext() = castContext();
	eq AbstractDot.getRight().stringContext() = stringContext();
	eq AbstractDot.getRight().numericContext() = numericContext();
	
	eq AbstractDot.getLeft().assignmentContext() = false;
	eq AbstractDot.getLeft().invocationContext() = false;
	eq AbstractDot.getLeft().castContext() = false;
	eq AbstractDot.getLeft().stringContext() = false;
	eq AbstractDot.getLeft().numericContext() = false;
	
	// 15.8.5
	eq ParExpr.getExpr().assignmentContext() = assignmentContext();
	eq ParExpr.getExpr().invocationContext() = invocationContext();
	eq ParExpr.getExpr().castContext() = castContext();
	eq ParExpr.getExpr().stringContext() = stringContext();
	eq ParExpr.getExpr().numericContext() = numericContext();
	
	eq CastExpr.getExpr().assignmentContext() = false;
	eq CastExpr.getExpr().invocationContext() = false;
	eq CastExpr.getExpr().castContext() = true;
	eq CastExpr.getExpr().stringContext() = false;
	eq CastExpr.getExpr().numericContext() = false;
	
	eq AssignExpr.getDest().assignmentContext() = false;
	eq AssignExpr.getDest().invocationContext() = false;
	eq AssignExpr.getDest().castContext() = false;
	eq AssignExpr.getDest().numericContext() = false;
	eq AssignExpr.getDest().stringContext() = false;
	
	eq AssignExpr.getSource().assignmentContext() = true;
	eq AssignExpr.getSource().invocationContext() = false;
	eq AssignExpr.getSource().castContext() = false;
	eq AssignExpr.getSource().stringContext() = false;
	eq AssignExpr.getSource().numericContext() = false;
	
	eq ClassInstanceExpr.getArg().assignmentContext() = false;
	eq ClassInstanceExpr.getArg().invocationContext() = true;
	eq ClassInstanceExpr.getArg().castContext() = false;
	eq ClassInstanceExpr.getArg().stringContext() = false;
	eq ClassInstanceExpr.getArg().numericContext() = false;
	
	eq MethodAccess.getArg().assignmentContext() = false;
	eq MethodAccess.getArg().invocationContext() = true;
	eq MethodAccess.getArg().castContext() = false;
	eq MethodAccess.getArg().stringContext() = false;
	eq MethodAccess.getArg().numericContext() = false;
	
	eq ConstructorAccess.getArg().assignmentContext() = false;
	eq ConstructorAccess.getArg().invocationContext() = true;
	eq ConstructorAccess.getArg().castContext() = false;
	eq ConstructorAccess.getArg().stringContext() = false;
	eq ConstructorAccess.getArg().numericContext() = false;
	
	eq ArrayInit.getInit().assignmentContext() = true;
	eq ArrayInit.getInit().invocationContext() = false;
	eq ArrayInit.getInit().castContext() = false;
	eq ArrayInit.getInit().stringContext() = false;
	eq ArrayInit.getInit().numericContext() = false;
	
	eq VariableDeclaration.getInit().assignmentContext() = true;
	eq VariableDeclaration.getInit().invocationContext() = false;
	eq VariableDeclaration.getInit().castContext() = false;
	eq VariableDeclaration.getInit().numericContext() = false;
	eq VariableDeclaration.getInit().stringContext() = false;
	
	eq ReturnStmt.getResult().assignmentContext() = true;
	eq ReturnStmt.getResult().invocationContext() = false;
	eq ReturnStmt.getResult().castContext() = false;
	eq ReturnStmt.getResult().stringContext() = false;
	eq ReturnStmt.getResult().numericContext() = false;
	
	eq VariableDecl.getInit().assignmentContext() = true;
	eq VariableDecl.getInit().invocationContext() = false;
	eq VariableDecl.getInit().castContext() = false;
	eq VariableDecl.getInit().stringContext() = false;
	eq VariableDecl.getInit().numericContext() = false;
	
	eq ArrayTypeWithSizeAccess.getExpr().assignmentContext() = false;
	eq ArrayTypeWithSizeAccess.getExpr().invocationContext() = false;
	eq ArrayTypeWithSizeAccess.getExpr().castContext() = false;
	eq ArrayTypeWithSizeAccess.getExpr().stringContext() = false;
	eq ArrayTypeWithSizeAccess.getExpr().numericContext() = false;
	
	eq FieldDeclaration.getInit().assignmentContext() = true;
	eq FieldDeclaration.getInit().invocationContext() = false;
	eq FieldDeclaration.getInit().castContext() = false;
	eq FieldDeclaration.getInit().stringContext() = false;
	eq FieldDeclaration.getInit().numericContext() = false;
	
	eq Dims.getExpr().assignmentContext() = false;
	eq Dims.getExpr().invocationContext() = false;
	eq Dims.getExpr().castContext() = false;
	eq Dims.getExpr().stringContext() = false;
	eq Dims.getExpr().numericContext() = false;
	
	eq ExprMethodReference.getExpr().assignmentContext() = false;
	eq ExprMethodReference.getExpr().invocationContext() = false;
	eq ExprMethodReference.getExpr().castContext() = false;
	eq ExprMethodReference.getExpr().stringContext() = false;
	eq ExprMethodReference.getExpr().numericContext() = false;
	
	eq TypeMethodReference.getTypeAccess().assignmentContext() = false;
	eq TypeMethodReference.getTypeAccess().invocationContext() = false;
	eq TypeMethodReference.getTypeAccess().castContext() = false;
	eq TypeMethodReference.getTypeAccess().stringContext() = false;
	eq TypeMethodReference.getTypeAccess().numericContext() = false;
	
	eq ConstructorReference.getTypeAccess().assignmentContext() = false;
	eq ConstructorReference.getTypeAccess().invocationContext() = false;
	eq ConstructorReference.getTypeAccess().castContext() = false;
	eq ConstructorReference.getTypeAccess().stringContext() = false;
	eq ConstructorReference.getTypeAccess().numericContext() = false;
}