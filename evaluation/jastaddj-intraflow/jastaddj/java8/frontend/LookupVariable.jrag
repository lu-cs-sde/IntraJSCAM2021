
aspect VariableScope {
	inh lazy SimpleSet LambdaBody.lookupVariable(String name);
	inh lazy SimpleSet InferredParameterDeclaration.lookupVariable(String name);

	eq DeclaredLambdaParameters.getParameter().lookupVariable(String name) = parameterDeclaration(name);
	eq InferredLambdaParameters.getParameter().lookupVariable(String name) = parameterDeclaration(name);
	
	syn lazy SimpleSet DeclaredLambdaParameters.parameterDeclaration(String name) {
		for(int i = 0; i < getNumParameter(); i++) {
			if(getParameter(i).name().equals(name))
				return (ParameterDeclaration)getParameter(i);
		}
		return SimpleSet.emptySet;
	}
 	 
	syn lazy SimpleSet InferredLambdaParameters.parameterDeclaration(String name) {
		for(int i = 0; i < getNumParameter(); i++) {
			if(getParameter(i).name().equals(name))
				return (InferredParameterDeclaration)getParameter(i);
		}
		return SimpleSet.emptySet;
	}
 	 
	eq LambdaExpr.getLambdaBody().lookupVariable(String name) { 	
		if(getLambdaParameters() instanceof DeclaredLambdaParameters) {
			SimpleSet decls = ((DeclaredLambdaParameters)getLambdaParameters()).parameterDeclaration(name);
			if(!decls.isEmpty()) {
				return decls;
			}
		}
		else if(getLambdaParameters() instanceof InferredLambdaParameters) {
			SimpleSet decls = ((InferredLambdaParameters)getLambdaParameters()).parameterDeclaration(name);
			if(!decls.isEmpty()) {
				return decls;
			}
		}		
		return lookupVariable(name);
 	}
}

aspect VariableScopePropagation {
	LambdaExpr implements VariableScope;
}