aspect Variables {
	InferredParameterDeclaration implements Variable;
	syn boolean InferredParameterDeclaration.isParameter() = true;
	syn boolean InferredParameterDeclaration.isClassVariable() = false;
	syn boolean InferredParameterDeclaration.isInstanceVariable() = false;
	syn boolean InferredParameterDeclaration.isConstructorParameter() = false;
	syn boolean InferredParameterDeclaration.isExceptionHandlerParameter() = false;
	syn boolean InferredParameterDeclaration.isMethodParameter() = false;
	syn boolean InferredParameterDeclaration.isLocalVariable() = false;
	syn boolean InferredParameterDeclaration.isFinal() = false;
	syn boolean InferredParameterDeclaration.isVolatile() = false;
	syn boolean InferredParameterDeclaration.isBlank() = true;
	syn boolean InferredParameterDeclaration.isStatic() = false;
	syn boolean InferredParameterDeclaration.isSynthetic() = false;
	
	eq InferredParameterDeclaration.sourceVariableDecl() = this;
	
	syn Modifiers InferredParameterDeclaration.getModifiers() = null;
	syn boolean InferredParameterDeclaration.hasInit() = false;
  	syn Expr InferredParameterDeclaration.getInit() { throw new UnsupportedOperationException(); }
  	syn Constant InferredParameterDeclaration.constant() { throw new UnsupportedOperationException(); }
  	syn Collection<TypeDecl> InferredParameterDeclaration.throwTypes() = null;
  	syn TypeDecl InferredParameterDeclaration.type() = inferredType();
  	syn TypeDecl InferredParameterDeclaration.hostType() {
  		if(getParent().getParent() instanceof LambdaExpr) {
  			return ((LambdaExpr)getParent().getParent()).hostType();
  		}
  		else {
  			return ((LambdaExpr)getParent().getParent().getParent()).hostType();
  		}
  	}
}