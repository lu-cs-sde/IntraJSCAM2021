aspect StructuredPrettyPrint {
	public String ASTNode.structuredPrettyPrint() {
    	StringBuffer sb = new StringBuffer();
    	structuredPrettyPrint(sb);
    	return sb.toString().trim();
	}

    public void ASTNode.structuredPrettyPrint(StringBuffer sb) {
		throw new Error("Operation structuredPrettyPrint(StringBuffer) not implemented for " + getClass().getName());
	}

  public void Program.structuredPrettyPrint(StringBuffer sb) {
    for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit cu = (CompilationUnit) iter.next();
      if (cu.fromSource()) {
        cu.structuredPrettyPrint(sb);
      }
    }
  }

  public void CompilationUnit.structuredPrettyPrint(StringBuffer sb) {
    try {
      if (!getPackageDecl().equals("")) {
        sb.append("package " + getPackageDecl() + ";\n");
      }
      for (int i = 0; i < getNumImportDecl(); i++) {
        getImportDecl(i).structuredPrettyPrint(sb);
      }
      for (int i = 0; i < getNumTypeDecl(); i++) {
        getTypeDecl(i).structuredPrettyPrint(sb);
        sb.append("\n");
      }
    } catch (NullPointerException e) {
      System.out.print("Error in compilation unit hosting " + getTypeDecl(0).typeName());
      throw e;
    }
  }

  public void SingleTypeImportDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append("import ");
    getAccess().structuredPrettyPrint(sb);
    sb.append(";\n");
  }

  public void TypeImportOnDemandDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append("import ");
    getAccess().structuredPrettyPrint(sb);
    sb.append(".*;\n");
  }

  protected void TypeDecl.sppBodyDecls(StringBuffer sb) {
    sb.append(" {");
    for(int i=0; i < getNumBodyDecl(); i++) {
      getBodyDecl(i).structuredPrettyPrint(sb);
    }
    sb.append(indent() + "}");
  }

  public void ClassDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    sb.append("class " + name());
    if(hasSuperClass()) {
      sb.append(" extends ");
      getSuperClass().structuredPrettyPrint(sb);
    }
    if(getNumImplements() > 0) {
      sb.append(" implements ");
      getImplements(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).structuredPrettyPrint(sb);
      }
    }
    sppBodyDecls(sb);
  }

  public void InterfaceDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    sb.append("interface " + name());
    if(getNumSuperInterface() > 0) {
      sb.append(" extends ");
      getSuperInterface(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumSuperInterface(); i++) {
        sb.append(", ");
        getSuperInterface(i).structuredPrettyPrint(sb);
      }
    }
    sppBodyDecls(sb);
  }

  // Type body decl

  public void InstanceInitializer.structuredPrettyPrint(StringBuffer sb) {
    if(getBlock().getNumStmt() == 0) return;
    sb.append(indent());
    getBlock().structuredPrettyPrint(sb);
  }

  public void StaticInitializer.structuredPrettyPrint(StringBuffer sb) {
    if(getBlock().getNumStmt() == 0) return;
    sb.append(indent());
    sb.append("static ");
    getBlock().structuredPrettyPrint(sb);
  }

  public void ConstructorDecl.structuredPrettyPrint(StringBuffer sb) {
    if(isDefaultConstructor()) return;
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    sb.append(name() + "(");
    if(getNumParameter() > 0) {
      getParameter(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).structuredPrettyPrint(sb);
      }
    }

    sb.append(" {");
    if(hasConstructorInvocation()) {
      getConstructorInvocation().structuredPrettyPrint(sb);
    }
    for(int i = 0; i < getBlock().getNumStmt(); i++) {
      getBlock().getStmt(i).structuredPrettyPrint(sb);
    }
    sb.append(indent());
    sb.append("}");
  }

  public void FieldDeclaration.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" " + name());
    if(hasInit()) {
      sb.append(" = ");
      getInit().structuredPrettyPrint(sb);
    }
    sb.append(";");
  }

  public void VariableDeclaration.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" " + name());
    if(hasInit()) {
      sb.append(" = ");
      getInit().structuredPrettyPrint(sb);
    }
    sb.append(";");
  }

  public void MethodDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" " + name() + "(");
    if(getNumParameter() > 0) {
      getParameter(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).structuredPrettyPrint(sb);
      }
    }
    if(hasBlock()) {
      sb.append(" ");
      getBlock().structuredPrettyPrint(sb);
    }
    else {
      sb.append(";");
    }
  }

  public void MemberClassDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getClassDecl().structuredPrettyPrint(sb);
  }

  public void MemberInterfaceDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getInterfaceDecl().structuredPrettyPrint(sb);
  }

  public void EmptyType.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append(";");
  }

  public void ArrayInit.structuredPrettyPrint(StringBuffer sb) {
    sb.append("{ ");
    if(getNumInit() > 0) {
      getInit(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumInit(); i++) {
        sb.append(", ");
        getInit(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(" } ");
  }

  public void ParameterDeclaration.structuredPrettyPrint(StringBuffer sb) {
    getModifiers().structuredPrettyPrint(sb);
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" " + name());
  }
	
  // Assign Expression

  public void AssignExpr.structuredPrettyPrint(StringBuffer sb) {
  	sb.append("(");
    getDest().structuredPrettyPrint(sb);
    sb.append(printOp());
    getSource().structuredPrettyPrint(sb);
  	sb.append(")");
  }

  // Literals
	
  public void Literal.structuredPrettyPrint(StringBuffer sb) {
    sb.append(getLITERAL());
  }

  public void StringLiteral.structuredPrettyPrint(StringBuffer sb) {
    sb.append("\"" + escape(getLITERAL()) + "\"");
  }

  public void CharacterLiteral.structuredPrettyPrint(StringBuffer sb) {
    sb.append("'" + escape(getLITERAL()) + "'");
  }


  public void ParExpr.structuredPrettyPrint(StringBuffer sb) {
    sb.append("(");
    getExpr().structuredPrettyPrint(sb);
    sb.append(")");
  }

  public void ClassInstanceExpr.structuredPrettyPrint(StringBuffer sb) {
    sb.append("new ");
    getAccess().structuredPrettyPrint(sb);
    sb.append("(");
    if(getNumArg() > 0) {
      getArg(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");

    if(hasTypeDecl()) {
      TypeDecl decl = getTypeDecl();
      sb.append(" {");
      for(int i = 0; i < decl.getNumBodyDecl(); i++) {
        if(!(decl.getBodyDecl(i) instanceof ConstructorDecl))
          decl.getBodyDecl(i).structuredPrettyPrint(sb);
      }
      sb.append(typeDeclIndent());
      sb.append("}");
    }
  }

  public void ArrayCreationExpr.structuredPrettyPrint(StringBuffer sb) {
    sb.append("new ");
    getTypeAccess().structuredPrettyPrint(sb);
    if(hasArrayInit()) {
      getArrayInit().structuredPrettyPrint(sb);
    }
  }
	
  // Pre and post operations for unary expression

  public void Unary.structuredPrettyPrint(StringBuffer sb) {
    sb.append("(");
    sb.append(printPreOp());
    getOperand().structuredPrettyPrint(sb);
    sb.append(printPostOp());
    sb.append(")");
  }


  public void CastExpr.structuredPrettyPrint(StringBuffer sb) {
    sb.append("(");
    sb.append("(");
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(")");
    getExpr().structuredPrettyPrint(sb);
    sb.append(")");
  }

  // Binary Expr

  public void Binary.structuredPrettyPrint(StringBuffer sb) {
    sb.append("(");
    getLeftOperand().structuredPrettyPrint(sb);
    sb.append(printOp());
    getRightOperand().structuredPrettyPrint(sb);
    sb.append(")");
  }

  public void InstanceOfExpr.structuredPrettyPrint(StringBuffer sb) {
  	sb.append("(");
    getExpr().structuredPrettyPrint(sb);
    sb.append(" instanceof ");
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(")");
  }

  public void ConditionalExpr.structuredPrettyPrint(StringBuffer sb) {
    sb.append("(");
    getCondition().structuredPrettyPrint(sb);
    sb.append(" ? ");
    getTrueExpr().structuredPrettyPrint(sb);
    sb.append(" : ");
    getFalseExpr().structuredPrettyPrint(sb);
  	sb.append(")");
  }
	
  public void Modifiers.structuredPrettyPrint(StringBuffer sb) {
    for(int i = 0; i < getNumModifier(); i++) {
      getModifier(i).structuredPrettyPrint(sb);
      sb.append(" ");
    }
  }

  public void Modifier.structuredPrettyPrint(StringBuffer sb) {
    sb.append(getID());
  }

  public void AbstractDot.structuredPrettyPrint(StringBuffer sb) {
    getLeft().structuredPrettyPrint(sb);
    if(!nextAccess().isArrayAccess())
      sb.append(".");
    getRight().structuredPrettyPrint(sb);
  }

  public void VarAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append(name());
  }

  public void MethodAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append(name());
    sb.append("(");
    if(getNumArg() > 0) {
      getArg(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
  }

  public void ConstructorAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append(name());
    sb.append("(");
    if(getNumArg() > 0) {
      getArg(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
  }

  public void TypeAccess.structuredPrettyPrint(StringBuffer sb) {
    if(decl().isReferenceType())
      sb.append(nameWithPackage());
    else
      sb.append(decl().name());
  }

  public void ArrayTypeAccess.structuredPrettyPrint(StringBuffer sb) {
    getAccess().structuredPrettyPrint(sb);
    sb.append("[]");
  }

  public void ArrayTypeWithSizeAccess.structuredPrettyPrint(StringBuffer sb) {
    getAccess().structuredPrettyPrint(sb);
    sb.append("[");
    getExpr().structuredPrettyPrint(sb);
    sb.append("]");
  }

  public void ThisAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("this");
  }

  public void SuperAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("super");
  }

  public void PackageAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append(getPackage());
  }

  public void ArrayAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("[");
    getExpr().structuredPrettyPrint(sb);
    sb.append("]");
  }

  public void ClassAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("class");
  }

  // Stmts

  public void Block.structuredPrettyPrint(StringBuffer sb) {
    String indent = indent();
    sb.append(shouldHaveIndent() ? indent : "");
    sb.append("{");
    for(int i = 0; i < getNumStmt(); i++) {
      getStmt(i).structuredPrettyPrint(sb);
    }
    sb.append(shouldHaveIndent() ? indent : indent.substring(0, indent.length()-2));
    sb.append("}");
  }

  public void EmptyStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append(";");
  }

  public void LabeledStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append(getLabel() + ":");
    getStmt().structuredPrettyPrint(sb);
  }

  public void ExprStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getExpr().structuredPrettyPrint(sb);
    sb.append(";");
  }

  public void SwitchStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("switch (");
    getExpr().structuredPrettyPrint(sb);
    sb.append(")");
    getBlock().structuredPrettyPrint(sb);
  }

  public void ConstCase.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("case ");
    getValue().structuredPrettyPrint(sb);
    sb.append(":");
  }

  public void DefaultCase.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("default:");
  }

  public void IfStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("if(");
    getCondition().structuredPrettyPrint(sb);
    sb.append(") ");
    getThen().structuredPrettyPrint(sb);
    if(hasElse()) {
      sb.append(indent());
      sb.append("else ");
      getElse().structuredPrettyPrint(sb);
    }
  }

  public void WhileStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("while(");
    getCondition().structuredPrettyPrint(sb);
    sb.append(")");
    getStmt().structuredPrettyPrint(sb);
  }

  public void DoStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("do ");
    getStmt().structuredPrettyPrint(sb);
    sb.append("while(");
    getCondition().structuredPrettyPrint(sb);
    sb.append(");");
  }

  public void ForStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("for(");
    if(getNumInitStmt() > 0) {
      if(getInitStmt(0) instanceof VariableDeclaration) {
        int minDimension = Integer.MAX_VALUE;
        for(int i = 0; i < getNumInitStmt(); i++) {
          VariableDeclaration v = (VariableDeclaration)getInitStmt(i);
          minDimension = Math.min(minDimension, v.type().dimension());
        }
        VariableDeclaration v = (VariableDeclaration)getInitStmt(0);
        v.getModifiers().structuredPrettyPrint(sb);
        sb.append(v.type().elementType().typeName());
        for(int i = minDimension; i > 0; i--)
          sb.append("[]");

        for(int i = 0; i < getNumInitStmt(); i++) {
          if(i != 0)
            sb.append(",");
          v = (VariableDeclaration)getInitStmt(i);
          sb.append(" " + v.name());
          for(int j = v.type().dimension() - minDimension; j > 0; j--)
            sb.append("[]");
          if(v.hasInit()) {
            sb.append(" = ");
            v.getInit().structuredPrettyPrint(sb);
          }
        }
      }
      else if(getInitStmt(0) instanceof ExprStmt) {
        ExprStmt stmt = (ExprStmt)getInitStmt(0);
        stmt.getExpr().structuredPrettyPrint(sb);
        for(int i = 1; i < getNumInitStmt(); i++) {
          sb.append(", ");
          stmt = (ExprStmt)getInitStmt(i);
          stmt.getExpr().structuredPrettyPrint(sb);
        }
      }
      else {
        throw new Error("Unexpected initializer in for loop: " + getInitStmt(0));
      }
    }

    sb.append("; ");
    if(hasCondition()) {
      getCondition().structuredPrettyPrint(sb);
    }
    sb.append("; ");

    if(getNumUpdateStmt() > 0) {
      ExprStmt stmt = (ExprStmt)getUpdateStmt(0);
      stmt.getExpr().structuredPrettyPrint(sb);
      for(int i = 1; i < getNumUpdateStmt(); i++) {
        sb.append(", ");
        stmt = (ExprStmt)getUpdateStmt(i);
        stmt.getExpr().structuredPrettyPrint(sb);
      }
    }

    sb.append(") ");
    getStmt().structuredPrettyPrint(sb);
  }

  public void BreakStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("break ");
    if(hasLabel())
      sb.append(getLabel());
    sb.append(";");
  }

  public void ContinueStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("continue ");
    if(hasLabel())
      sb.append(getLabel());
    sb.append(";");
  }

  public void ReturnStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("return ");
    if(hasResult()) {
      getResult().structuredPrettyPrint(sb);
    }
    sb.append(";");
  }

  public void ThrowStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("throw ");
    getExpr().structuredPrettyPrint(sb);
    sb.append(";");
  }

  public void SynchronizedStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("synchronized(");
    getExpr().structuredPrettyPrint(sb);
    sb.append(") ");
    getBlock().structuredPrettyPrint(sb);
  }

  public void TryStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("try ");
    getBlock().structuredPrettyPrint(sb);
    for(int i = 0; i < getNumCatchClause(); i++) {
      sb.append(indent());
      getCatchClause(i).structuredPrettyPrint(sb);
    }
    if(hasFinally()) {
      sb.append(indent());
      sb.append("finally ");
      getFinally().structuredPrettyPrint(sb);
    }
  }

  public void BasicCatch.structuredPrettyPrint(StringBuffer sb) {
    sb.append("catch (");
    getParameter().structuredPrettyPrint(sb);
    sb.append(") ");
    getBlock().structuredPrettyPrint(sb);
  }

  public void AssertStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("assert ");
    getCondition().structuredPrettyPrint(sb);
    if(hasMessage()) {
      sb.append(" : ");
      getMessage().structuredPrettyPrint(sb);
    }
    sb.append(";");
  }

  public void LocalClassDeclStmt.structuredPrettyPrint(StringBuffer sb) {
    getClassDecl().structuredPrettyPrint(sb);
  }
  
  
  
  
  
  public void BooleanType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("boolean");
  }
  public void ByteType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("byte");
  }
  public void ShortType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("short");
  }
  public void IntType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("int");
  }
  public void LongType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("long");
  }
  public void CharType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("char");
  }
  public void FloatType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("float");
  }
  public void DoubleType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("double");
  }
  public void NullType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("null");
  }
  public void VoidType.structuredPrettyPrint(StringBuffer sb) {
    sb.append("void");
  }
  
  
  
  
  
  
  public void AnnotatedCompilationUnit.structuredPrettyPrint(StringBuffer sb) {
      getModifiers().structuredPrettyPrint(sb);
      super.structuredPrettyPrint(sb);
  }

  public void Annotation.structuredPrettyPrint(StringBuffer sb) {
    sb.append("@");
    getAccess().structuredPrettyPrint(sb);
    sb.append("(");
    for(int i = 0; i < getNumElementValuePair(); i++) {
      if(i != 0)
        sb.append(", ");
      getElementValuePair(i).structuredPrettyPrint(sb);
    }
    sb.append(")");
  }

  public void ElementValuePair.structuredPrettyPrint(StringBuffer sb) {
    sb.append(getName() + " = ");
    getElementValue().structuredPrettyPrint(sb);
  }

  public void ElementConstantValue.structuredPrettyPrint(StringBuffer sb) {
    getExpr().structuredPrettyPrint(sb);
  }

  public void ElementAnnotationValue.structuredPrettyPrint(StringBuffer sb) {
    getAnnotation().structuredPrettyPrint(sb);
  }

  public void ElementArrayValue.structuredPrettyPrint(StringBuffer sb) {
    sb.append("{");
    for (int i = 0; i < getNumElementValue(); i++) {
      getElementValue(i).structuredPrettyPrint(sb);
      sb.append(", ");
    }
    sb.append("}");
  }
  
  public void EnhancedForStmt.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    sb.append("for (");
    getVariableDeclaration().getModifiers().structuredPrettyPrint(sb);
    getVariableDeclaration().getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" " + getVariableDeclaration().name());
    sb.append(" : ");
    getExpr().structuredPrettyPrint(sb);
    sb.append(") ");
    getStmt().structuredPrettyPrint(sb);
  }
  
  public void EnumDecl.structuredPrettyPrint(StringBuffer sb) {
    getModifiers().structuredPrettyPrint(sb);
    sb.append("enum " + name());
    if (getNumImplements() > 0) {
      sb.append(" implements ");
      getImplements(0).structuredPrettyPrint(sb);
      for (int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(" {");
    for (int i=0; i < getNumBodyDecl(); i++) {
      BodyDecl d = getBodyDecl(i);
      if (d instanceof EnumConstant) {
        d.structuredPrettyPrint(sb);
        if (i + 1 < getNumBodyDecl() && !(getBodyDecl(i + 1) instanceof EnumConstant)) {
          sb.append(indent() + ";");
        }
      } else if(d instanceof ConstructorDecl) {
        ConstructorDecl c = (ConstructorDecl)d;
        if (!c.isSynthetic()) {
          sb.append(indent());
          c.getModifiers().structuredPrettyPrint(sb);
          sb.append(c.name() + "(");
          if (c.getNumParameter() > 2) {
            c.getParameter(2).structuredPrettyPrint(sb);
            for (int j = 3; j < c.getNumParameter(); j++) {
              sb.append(", ");
              c.getParameter(j).structuredPrettyPrint(sb);
            }
          }
          sb.append(")");
          if (c.getNumException() > 0) {
            sb.append(" throws ");
            c.getException(0).structuredPrettyPrint(sb);
            for (int j = 1; j < c.getNumException(); j++) {
              sb.append(", ");
              c.getException(j).structuredPrettyPrint(sb);
            }
          }
          sb.append(" {");
          for (int j = 0; j < c.getBlock().getNumStmt(); j++) {
            c.getBlock().getStmt(j).structuredPrettyPrint(sb);
          }
          sb.append(indent());
          sb.append("}");
        }
      } else if (d instanceof MethodDecl) {
        MethodDecl m = (MethodDecl)d;
        if (!m.isSynthetic()) {
          m.structuredPrettyPrint(sb);
        }
      } else if (d instanceof FieldDeclaration) {
        FieldDeclaration f = (FieldDeclaration)d;
        if (!f.isSynthetic()) {
          f.structuredPrettyPrint(sb);
        }
      } else {
        d.structuredPrettyPrint(sb);
      }
    }
    sb.append(indent() + "}");
  }

  public void EnumConstant.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);
    sb.append(getID());
    sb.append("(");
    if (getNumArg() > 0) {
      getArg(0).structuredPrettyPrint(sb);
      for (int i = 1; i < getNumArg(); i++) {
        sb.append(", ");
        getArg(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
    if (getNumBodyDecl() > 0) {
      sb.append(" {");
      for (int i=0; i < getNumBodyDecl(); i++) {
        BodyDecl d = getBodyDecl(i);
        d.structuredPrettyPrint(sb);
      }
      sb.append(indent() + "}");
    }
    sb.append(",\n");
  }
  
  public void ParMethodAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).structuredPrettyPrint(sb);
    }
    sb.append(">");
    super.structuredPrettyPrint(sb);
  }

  public void ParConstructorAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).structuredPrettyPrint(sb);
    }
    sb.append(">");
    super.structuredPrettyPrint(sb);
  }

  public void ParSuperConstructorAccess.structuredPrettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).structuredPrettyPrint(sb);
    }
    sb.append(">");
    super.structuredPrettyPrint(sb);
  }

  public void ParClassInstanceExpr.structuredPrettyPrint(StringBuffer sb) {
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0) sb.append(", ");
      getTypeArgument(i).structuredPrettyPrint(sb);
    }
    sb.append(">");
    super.structuredPrettyPrint(sb);
  }

  private void GenericMethodDecl.sppTypeParameters(StringBuffer sb) {
    sb.append(" <");
    for(int i = 0; i < getNumTypeParameter(); i++) {
      if(i != 0) sb.append(", ");
      original().getTypeParameter(i).structuredPrettyPrint(sb);
    }
    sb.append("> ");
  }

  public void GenericMethodDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);

    sppTypeParameters(sb);

    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" " + getID());
    sb.append("(");
    if(getNumParameter() > 0) {
      getParameter(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).structuredPrettyPrint(sb);
      }
    }
    if(hasBlock()) {
      sb.append(" ");
      getBlock().structuredPrettyPrint(sb);
    }
    else {
      sb.append(";\n");
    }
  }

  public void GenericConstructorDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent());
    getModifiers().structuredPrettyPrint(sb);

    sb.append(" <");
    for(int i = 0; i < getNumTypeParameter(); i++) {
      if(i != 0) sb.append(", ");
      original().getTypeParameter(i).structuredPrettyPrint(sb);
    }
    sb.append("> ");

    sb.append(getID() + "(");
    if(getNumParameter() > 0) {
      getParameter(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumParameter(); i++) {
        sb.append(", ");
        getParameter(i).structuredPrettyPrint(sb);
      }
    }
    sb.append(")");
    if(getNumException() > 0) {
      sb.append(" throws ");
      getException(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumException(); i++) {
        sb.append(", ");
        getException(i).structuredPrettyPrint(sb);
      }
    }

    sb.append(" {");
    if(hasConstructorInvocation()) {
      sb.append(indent());
      getConstructorInvocation().structuredPrettyPrint(sb);
    }
    for(int i = 0; i < getBlock().getNumStmt(); i++) {
      sb.append(indent());
      getBlock().getStmt(i).structuredPrettyPrint(sb);
    }
    sb.append(indent());
    sb.append("}");
  }
  
  public void TypeVariable.structuredPrettyPrint(StringBuffer sb) {
    sb.append(name());
    if(getNumTypeBound() > 0) {
      sb.append(" extends ");
      sb.append(getTypeBound(0).type().fullName());
      for(int i = 1; i < getNumTypeBound(); i++) {
        sb.append(" & ");
        sb.append(getTypeBound(i).type().fullName());
      }
    }
  }

  public void ParTypeAccess.structuredPrettyPrint(StringBuffer sb) {
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0)
        sb.append(", ");
      getTypeArgument(i).structuredPrettyPrint(sb);
    }
    sb.append(">");
  }

  public void ParClassDecl.structuredPrettyPrint(StringBuffer sb) {
      getModifiers().structuredPrettyPrint(sb);
      sb.append("class " + getID());
      sb.append('<');
      if (getNumArgument() > 0) {
    getArgument(0).structuredPrettyPrint(sb);
    for (int i = 1; i < getNumArgument(); i++) {
        sb.append(", ");
        getArgument(i).structuredPrettyPrint(sb);
    }
      }
      sb.append('>');
      if(hasSuperClass()) {
    sb.append(" extends ");
    getSuperClass().structuredPrettyPrint(sb);
      }
      if(getNumImplements() > 0) {
    sb.append(" implements ");
    getImplements(0).structuredPrettyPrint(sb);
    for(int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).structuredPrettyPrint(sb);
    }
      }
      sppBodyDecls(sb);
  }

  private void GenericClassDecl.sppTypeParameters(StringBuffer sb) {
      sb.append('<');
      if (getNumTypeParameter() > 0) {
    getTypeParameter(0).structuredPrettyPrint(sb);
    for (int i = 1; i < getNumTypeParameter(); i++) {
        sb.append(", ");
        getTypeParameter(i).structuredPrettyPrint(sb);
    }
      }
      sb.append('>');
  }

  public void GenericClassDecl.structuredPrettyPrint(StringBuffer sb) {
    getModifiers().structuredPrettyPrint(sb);
    sb.append("class " + getID());
    sppTypeParameters(sb);
    if(hasSuperClass()) {
      sb.append(" extends ");
      getSuperClass().structuredPrettyPrint(sb);
    }
    if(getNumImplements() > 0) {
      sb.append(" implements ");
      getImplements(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumImplements(); i++) {
        sb.append(", ");
        getImplements(i).structuredPrettyPrint(sb);
      }
    }

    sppBodyDecls(sb);

  }

  public void GenericInterfaceDecl.structuredPrettyPrint(StringBuffer sb) {
    getModifiers().structuredPrettyPrint(sb);
    sb.append("interface " + getID());
    sb.append('<');
      if (getNumTypeParameter() > 0) {
        getTypeParameter(0).structuredPrettyPrint(sb);
        for (int i = 1; i < getNumTypeParameter(); i++) {
          sb.append(", ");
          getTypeParameter(i).structuredPrettyPrint(sb);
        }
      }
      sb.append('>');
    if(getNumSuperInterface() > 0) {
      sb.append(" extends ");
      getSuperInterface(0).structuredPrettyPrint(sb);
      for(int i = 1; i < getNumSuperInterface(); i++) {
        sb.append(", ");
        getSuperInterface(i).structuredPrettyPrint(sb);
      }
    }

    sppBodyDecls(sb);

  }

  public void Wildcard.structuredPrettyPrint(StringBuffer sb) {
    sb.append("?");
  }

  public void WildcardExtends.structuredPrettyPrint(StringBuffer sb) {
    sb.append("? extends ");
    getAccess().structuredPrettyPrint(sb);
  }

  public void WildcardSuper.structuredPrettyPrint(StringBuffer sb) {
    sb.append("? super ");
    getAccess().structuredPrettyPrint(sb);
  }
  
  public void SingleStaticImportDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append("import static ");
    getAccess().structuredPrettyPrint(sb);
    sb.append("." + getID());
    sb.append(";\n");
  }

  public void StaticImportOnDemandDecl.structuredPrettyPrint(StringBuffer sb) {
    sb.append("import static ");
    getAccess().structuredPrettyPrint(sb);
    sb.append(".*;\n");
  }
  
  public void VariableArityParameterDeclaration.structuredPrettyPrint(StringBuffer sb) {
    getModifiers().structuredPrettyPrint(sb);
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append(" ... " + name());
  }
  
  public void StandInMethodDecl.structuredPrettyPrint(StringBuffer sb) { }
  
  public void DiamondAccess.structuredPrettyPrint(StringBuffer sb) {
    getTypeAccess().structuredPrettyPrint(sb);
    sb.append("<>");
  }
  
  public void LongLiteral.structuredPrettyPrint(StringBuffer sb) {
    super.structuredPrettyPrint(sb);
  }

  public void FloatingPointLiteral.structuredPrettyPrint(StringBuffer sb) {
    super.structuredPrettyPrint(sb);
  }

  public void DoubleLiteral.structuredPrettyPrint(StringBuffer sb) {
    super.structuredPrettyPrint(sb);
  }
  
  public void MultiCatch.structuredPrettyPrint(StringBuffer sb) {
    sb.append("catch (");
    getParameter().structuredPrettyPrint(sb);
    sb.append(") ");
    getBlock().structuredPrettyPrint(sb);
  }
  
  public void CatchParameterDeclaration.structuredPrettyPrint(StringBuffer sb) {
    getModifiers().structuredPrettyPrint(sb);
    for (int i = 0; i < getNumTypeAccess(); ++i) {
      if (i > 0) sb.append(" | ");
      getTypeAccess(i).structuredPrettyPrint(sb);
    }
    sb.append(" "+getID());
  }
  
  public void TryWithResources.structuredPrettyPrint(StringBuffer sb) {
    sb.append(indent() + "try (");
    for (ResourceDeclaration resource : getResourceList()) {
      resource.structuredPrettyPrint(sb);
    }
    sb.append(") ");
    getBlock().structuredPrettyPrint(sb);
    for (CatchClause cc : getCatchClauseList()) {
      sb.append(" ");
      cc.structuredPrettyPrint(sb);
    }
    if (hasFinally()) {
      sb.append(" finally ");
      getFinally().structuredPrettyPrint(sb);
    }
  }
	
	
	public void ClassReference.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		getTypeAccess().structuredPrettyPrint(sb);
		sb.append("::");
		if(getNumTypeArgument() > 0) {
			sb.append("<");
			getTypeArgument(0).structuredPrettyPrint(sb);
			for(int i = 1; i < getNumTypeArgument(); i++) {
				sb.append(", ");
				getTypeArgument(i).structuredPrettyPrint(sb);
			}
			sb.append(">");
		}
		sb.append("new");
		sb.append(")");	
	}
	
	public void ArrayReference.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		getTypeAccess().structuredPrettyPrint(sb);
		sb.append("::");
		sb.append("new");
		sb.append(")");
	}
	
	public void ExprMethodReference.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		getExpr().structuredPrettyPrint(sb);
		sb.append("::");
		if(getNumTypeArgument() > 0) {
			sb.append("<");
			getTypeArgument(0).structuredPrettyPrint(sb);
			for(int i = 1; i < getNumTypeArgument(); i++) {
				sb.append(", ");
				getTypeArgument(i).structuredPrettyPrint(sb);
			}
			sb.append(">");
		}
		sb.append(name());
		sb.append(")");
	}
	
	public void TypeMethodReference.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		getTypeAccess().structuredPrettyPrint(sb);
		sb.append("::");
		if(getNumTypeArgument() > 0) {
			sb.append("<");
			getTypeArgument(0).structuredPrettyPrint(sb);
			for(int i = 1; i < getNumTypeArgument(); i++) {
				sb.append(", ");
				getTypeArgument(i).structuredPrettyPrint(sb);
			}
			sb.append(">");
		}
		sb.append(name());
		sb.append(")");
	}
	
	public void IntersectionCastExpr.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		sb.append("(");
		getTypeAccess().structuredPrettyPrint(sb);
		if(getNumTypeList() > 0) {
			sb.append(" & ");
			getTypeList(0).structuredPrettyPrint(sb);
			for(int i = 1; i < getNumTypeList(); i++) {
				sb.append(" & ");
				getTypeList(i).structuredPrettyPrint(sb);
			}
		}
		sb.append(")");
		getExpr().structuredPrettyPrint(sb);
		sb.append(")");
	}
	
	public void LambdaExpr.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		getLambdaParameters().structuredPrettyPrint(sb);
		sb.append(" -> ");
		getLambdaBody().structuredPrettyPrint(sb);
		sb.append(")");
	}
	
	public void InferredLambdaParameters.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		getParameter(0).prettyPrint(sb);
		for(int i = 1; i < getNumParameter(); i++) {
			sb.append(", ");
			getParameter(i).prettyPrint(sb);
		}
		sb.append(")");
	}
	
	public void InferredParameterDeclaration.structuredPrettyPrint(StringBuffer sb) {
		sb.append(name());
	}
	
	public void DeclaredLambdaParameters.structuredPrettyPrint(StringBuffer sb) {
		sb.append("(");
		if(getNumParameter() > 0) {
			getParameter(0).prettyPrint(sb);
			for(int i = 1; i < getNumParameter(); i++) {
				sb.append(", ");
				getParameter(i).prettyPrint(sb);
			}
		}
		sb.append(")");
	}
	
	public void BlockLambdaBody.structuredPrettyPrint(StringBuffer sb) {
		getBlock().structuredPrettyPrint(sb);
	}
	
	public void ExprLambdaBody.structuredPrettyPrint(StringBuffer sb) {
		getExpr().structuredPrettyPrint(sb);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*refine PrettyPrint
	public void AssignExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.AssignExpr.prettyPrint(sb);
  		sb.append(")");
	}
  
	refine PrettyPrint
	public void Unary.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.Unary.prettyPrint(sb);
		sb.append(")");
	}

	refine PrettyPrint
	public void CastExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.CastExpr.prettyPrint(sb);
		sb.append(")");
	}

	refine PrettyPrint
	public void Binary.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.Binary.prettyPrint(sb);
		sb.append(")");
	}

	refine PrettyPrint
	public void InstanceOfExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.InstanceOfExpr.prettyPrint(sb);
		sb.append(")");
	}

	refine PrettyPrint
	public void ConditionalExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.ConditionalExpr.prettyPrint(sb);
		sb.append(")");
	}
	
	refine PrettyPrint
	public void ClassReference.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.ClassReference.prettyPrint(sb);
		sb.append(")");
	}
	
	refine PrettyPrint
	public void ArrayReference.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.ArrayReference.prettyPrint(sb);
		sb.append(")");
	}
	
	refine PrettyPrint
	public void ExprMethodReference.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.ExprMethodReference.prettyPrint(sb);
		sb.append(")");
	}
	
	refine PrettyPrint
	public void TypeMethodReference.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.TypeMethodReference.prettyPrint(sb);
		sb.append(")");
	}
	
	refine PrettyPrint
	public void IntersectionCastExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.IntersectionCastExpr.prettyPrint(sb);
		sb.append(")");
	}
	
	refine PrettyPrint
	public void LambdaExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		PrettyPrint.LambdaExpr.prettyPrint(sb);
		sb.append(")");
	}*/
}