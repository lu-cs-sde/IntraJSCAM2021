aspect PrettyPrint {
	eq InferredParameterDeclaration.dumpString() = getClass().getName() + " [" + name() + "]";
	eq MethodReference.dumpString() = getClass().getName() + " [" + name() + "]";
	
	public void ClassReference.prettyPrint(StringBuffer sb) {
		getTypeAccess().prettyPrint(sb);
		sb.append("::");
		if(getNumTypeArgument() > 0) {
			sb.append("<");
			getTypeArgument(0).prettyPrint(sb);
			for(int i = 1; i < getNumTypeArgument(); i++) {
				sb.append(", ");
				getTypeArgument(i).prettyPrint(sb);
			}
			sb.append(">");
		}
		sb.append("new");	
	}
	
	public void ArrayReference.prettyPrint(StringBuffer sb) {
		getTypeAccess().prettyPrint(sb);
		sb.append("::");
		sb.append("new");
	}
	
	public void ExprMethodReference.prettyPrint(StringBuffer sb) {
		getExpr().prettyPrint(sb);
		sb.append("::");
		if(getNumTypeArgument() > 0) {
			sb.append("<");
			getTypeArgument(0).prettyPrint(sb);
			for(int i = 1; i < getNumTypeArgument(); i++) {
				sb.append(", ");
				getTypeArgument(i).prettyPrint(sb);
			}
			sb.append(">");
		}
		sb.append(name());
	}
	
	public void TypeMethodReference.prettyPrint(StringBuffer sb) {
		getTypeAccess().prettyPrint(sb);
		sb.append("::");
		if(getNumTypeArgument() > 0) {
			sb.append("<");
			getTypeArgument(0).prettyPrint(sb);
			for(int i = 1; i < getNumTypeArgument(); i++) {
				sb.append(", ");
				getTypeArgument(i).prettyPrint(sb);
			}
			sb.append(">");
		}
		sb.append(name());
	}
	
	public void IntersectionCastExpr.prettyPrint(StringBuffer sb) {
		sb.append("(");
		getTypeAccess().prettyPrint(sb);
		if(getNumTypeList() > 0) {
			sb.append(" & ");
			getTypeList(0).prettyPrint(sb);
			for(int i = 1; i < getNumTypeList(); i++) {
				sb.append(" & ");
				getTypeList(i).prettyPrint(sb);
			}
		}
		sb.append(")");
		getExpr().prettyPrint(sb);
	}
	
	public void LambdaExpr.prettyPrint(StringBuffer sb) {
		getLambdaParameters().prettyPrint(sb);
		sb.append(" -> ");
		getLambdaBody().prettyPrint(sb);
	}
	
	public void InferredLambdaParameters.prettyPrint(StringBuffer sb) {
		sb.append("(");
		getParameter(0).prettyPrint(sb);
		for(int i = 1; i < getNumParameter(); i++) {
			sb.append(", ");
			getParameter(i).prettyPrint(sb);
		}
		sb.append(")");
	}
	
	public void InferredParameterDeclaration.prettyPrint(StringBuffer sb) {
		sb.append(name());
	}
	
	public void DeclaredLambdaParameters.prettyPrint(StringBuffer sb) {
		sb.append("(");
		if(getNumParameter() > 0) {
			getParameter(0).prettyPrint(sb);
			for(int i = 1; i < getNumParameter(); i++) {
				sb.append(", ");
				getParameter(i).prettyPrint(sb);
			}
		}
		sb.append(")");
	}
	
	public void BlockLambdaBody.prettyPrint(StringBuffer sb) {
		getBlock().prettyPrint(sb);
	}
	
	public void ExprLambdaBody.prettyPrint(StringBuffer sb) {
		getExpr().prettyPrint(sb);
	}
}
