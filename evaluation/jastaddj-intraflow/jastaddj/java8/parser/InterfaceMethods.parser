
/*BodyDecl interface_member_declaration :=
    constant_declaration
  | interface_method_declaration
  | class_declaration.c                        {: return new MemberClassDecl(c); :}
  | interface_declaration.i                    {: return new MemberInterfaceDecl(i); :}
  | SEMICOLON                                  {: return new StaticInitializer(new Block()); :}
;*/

BodyDecl abstract_method_declaration := interface_method_declaration;
  
MethodDecl interface_method_declaration  =
	interface_method_header.m method_body.b		 {: m.setBlockOpt(b); return m; :}
;

MethodDecl interface_method_header =
	modifiers.m? type.t IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl? 
	{: return new MethodDecl(new Modifiers(m), t.addArrayDims(d), i, l, tl, new Opt()); :}
  |	modifiers.m? VOID IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN throws.tl? 
	{: return new MethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), i, l, tl, new Opt()); :}
  | modifiers.m? type_parameters.p type.t IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl? 
	{: return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(d), i, l, tl, new Opt(), p); :}
  | modifiers.m? type_parameters.p VOID IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN throws.tl? 
	{: return new GenericMethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), i, l, tl, new Opt(), p); :}
  |	modifiers_with_default.m type.t IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl? 
	{: return new MethodDecl(new Modifiers(m), t.addArrayDims(d), i, l, tl, new Opt()); :}
  |	modifiers_with_default.m VOID IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN throws.tl? 
	{: return new MethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), i, l, tl, new Opt()); :}
  | modifiers_with_default.m type_parameters.p type.t IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl? 
	{: return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(d), i, l, tl, new Opt(), p); :}
  | modifiers_with_default.m type_parameters.p VOID IDENTIFIER.i LPAREN formal_parameter_list.l? RPAREN throws.tl? 
	{: return new GenericMethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), i, l, tl, new Opt(), p); :}
;


List modifiers_with_default = 
	modifiers.m1? DEFAULT interface_method_modifiers.m2?
	{: List tmpList = new List();
		for(Object m : m1) {
			tmpList.add((Modifier)m);
		} 
		tmpList.add(new Modifier("default"));
		for(Object m : m2) {
			tmpList.add((Modifier)m);
		}
		return tmpList;
	:}
;

List interface_method_modifiers = 
	interface_method_modifier.m									{: return new List().add(m); :}
	| interface_method_modifiers.l interface_method_modifier.m   {: return l.add(m); :}
;

Modifier interface_method_modifier = 
	annotation
  | PUBLIC                  {: return new Modifier("public"); :}
  | STATIC                  {: return new Modifier("static"); :}
  | ABSTRACT                {: return new Modifier("abstract"); :}
  | STRICTFP                {: return new Modifier("strictfp"); :}
  | DEFAULT					{: return new Modifier("default"); :}
  ;