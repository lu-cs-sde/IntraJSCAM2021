aspect CreateBCode {
	public void LambdaExpr.createBCode(CodeGeneration gen) {
		toClass().createBCode(gen);
	}
	
	public void ExprMethodReference.createBCode(CodeGeneration gen) {
		toClass().createBCode(gen);
	}
	
	public void TypeMethodReference.createBCode(CodeGeneration gen) {
		toClass().createBCode(gen);
	}
	
	public void ConstructorReference.createBCode(CodeGeneration gen) {
		toClass().createBCode(gen);
	}
	
	refine CreateBCode
	public void SuperAccess.createBCode(CodeGeneration gen) {
		if(decl().isInterfaceDecl())
			emitThis(gen, hostType());
		else
			emitThis(gen, decl());
	}
	
	// TEMPORARY REFINE TO PREVENT SUPERACCESSORS FROM BEING CREATED WHEN INTERFACE IS THE QUALIFIER
	refine GenericsCodegen 
	public void MethodAccess.createBCode(CodeGeneration gen) {
    MethodDecl decl = decl().erasedMethod();
    createLoadQualifier(gen);

    if (options().hasOption("-debug")) {
      if (decl.type().isUnknown()) {
        System.err.println("Could not bind " + this);
        for (int i = 0; i < getNumArg(); ++i) {
          System.err.println("Argument " + getArg(i) +
              " is of type " + getArg(i).type().typeName());
          if (getArg(i).varDecl() != null) {
            System.err.println(getArg(i).varDecl() + " in " +
                getArg(i).varDecl().hostType().typeName());
          }
        }
        if (isQualified()) {
          System.err.println("Qualifier " + qualifier() +
              " is of type " + qualifier().type().typeName());
        }
        throw new Error("Could not bind " + this);
      }
      if(decl.getNumParameter() != getNumArg()) {
        System.out.println(this +
            " does not have the same number of arguments as " + decl);
      }
    }

    for (int i = 0; i < getNumArg(); ++i) {
      getArg(i).createBCode(gen);
      // the cast or boxing/unboxing operation must know the bound rather than the erased type
      getArg(i).type().emitCastTo(gen, decl().getParameter(i).type()); // MethodInvocationConversion
    }

    if (!decl.isStatic() && isQualified() && prevExpr().isSuperAccess()) {
      if (!hostType().instanceOf(prevExpr().type()) && !prevExpr().type().isInterfaceDecl()) {
        /* should this be decl instead? possible copy/paste error? */
        decl().createSuperAccessor(superAccessorTarget()).emitInvokeMethod(gen, superAccessorTarget());
      } else {
        decl.emitInvokeSpecialMethod(gen, methodQualifierType());
      }
    } else {
      decl.emitInvokeMethod(gen, methodQualifierType());
    }

    if (decl.type() != decl().type()) {
      gen.emitCheckCast(decl().type());
    }
  }
}