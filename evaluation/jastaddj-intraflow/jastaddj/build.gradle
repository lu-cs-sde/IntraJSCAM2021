buildscript {
	repositories.maven {
		url 'http://jastadd.org/mvn'
	}
	dependencies {
		classpath group: 'org.jastadd', name: 'jastaddgradle', version: '1.2'
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jastadd'

jastadd {
	modules project, ["java4", "java5", "java6", "java7"]

	// JastAddJ build parameters
	// use -Djastadd.module="..." to select module to build
	if (System.hasProperty('jastadd.module'))
		module = System.properties['jastadd.module']
	else
		module = "java7 backend"

	astPackage = "AST"
	sourceDir = "src"
	toolsDir = "tools"
	resourceDir = "${sourceDir}/res"

	tmpDir = "${sourceDir}/tmp"
	genDir = "${sourceDir}/gen"
	genResDir = "${sourceDir}/gen-res"
}

mainClassName = 'org.jastadd.jastaddj.JavaCompiler'
jar.manifest.attributes 'Main-Class': "${mainClassName}"

// generate jastaddj.jar in project root directory:
jar.destinationDir = projectDir

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

processResources.dependsOn 'updateVersionString'
sourceSets {
	main {
		java {
			srcDir "${project.jastadd.sourceDir}/frontend"
			srcDir "${project.jastadd.sourceDir}/backend"
			srcDir project.jastadd.genDir
		}
		resources {
			srcDir "${project.jastadd.genResDir}"
			srcDir "${project.jastadd.resourceDir}"
		}
	}
}

dependencies {
	compile files("${project.jastadd.toolsDir}/ant-1.9.1.jar")
}

// use git describe to update the version string
task updateVersionString << {
	def out = new StringBuilder()
	def err = new StringBuilder()
	def command = ['git', 'describe']
	def proc = command.execute()
	proc.waitForProcessOutput(out, err)
	if (proc.exitValue()) {
		println "warning: failed to run git describe to update version name"
		println "${err}"
	} else {
		if (err) println "${err}"
		def outputFile = file("${project.jastadd.resourceDir}/Version.properties")
		ant.propertyfile(file: outputFile) {
			entry(key: "version", value: "${out.toString().readLines()[0]}")
		}
		command = ['git', 'update-index', '--assume-unchanged', outputFile.path]
		out.setLength(0)
		err.setLength(0)
		proc = command.execute()
		proc.waitForProcessOutput(out, err)
		if (proc.exitValue()) {
			println "warning: git update-index failed"
			println "${err}"
		}
	}
}

