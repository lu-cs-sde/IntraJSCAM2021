
aspect Helpers {

  // emptySmallSet
  syn lazy SmallSet BodyDecl.emptySmallSet() = SmallSet.empty();
  //	inh lazy SmallSet Stmt.emptySmallSet();
  //	inh lazy SmallSet Expr.emptySmallSet();
  eq Program.getChild().emptySmallSet() = SmallSet.empty();
  eq BodyDecl.getChild().emptySmallSet() = emptySmallSet();

  // emptyBitSet
  syn lazy BitSet BodyDecl.emptyBitSet() = new BitSet();
  syn lazy BitSet TypeDecl.emptyBitSet() = new BitSet();
  //	inh lazy BitSet Stmt.emptyBitSet();
  //	inh lazy BitSet Expr.emptyBitSet();
  eq Program.getChild().emptyBitSet() {
    throw new UnsupportedOperationException();
  }
  eq TypeDecl.getChild().emptyBitSet() = emptyBitSet();
  eq BodyDecl.getChild().emptyBitSet() = emptyBitSet();

  // isBreakStmt
  syn boolean Stmt.isBreakStmt() = false;
  eq BreakStmt.isBreakStmt() = true;

  // isContinueStmt
  syn boolean Stmt.isContinueStmt() = false;
  eq ContinueStmt.isContinueStmt() = true;

  // isReturnStmt
  syn boolean Stmt.isReturnStmt() = false;
  eq ReturnStmt.isReturnStmt() = true;

  // isThrowStmt
  syn boolean Stmt.isThrowStmt() = false;
  eq ThrowStmt.isThrowStmt() = true;

  // isDefaultCase
  syn boolean Stmt.isDefaultCase() = false;
  eq DefaultCase.isDefaultCase() = true;

  // isLocalStore
  syn boolean Expr.isLocalStore() = false;
  eq VarAccess.isLocalStore() =
      decl().isLocalVariable() || decl().isMethodParameter();

  // anonymousUses
  // We want variables used in an anonymous class to be included in the use set
  // of its enclosing class instance expression.
  coll BitSet ClassInstanceExpr
      .anonymousUses()[emptyBitSet().mutable()] with add root Program;
  VarAccess contributes decl() when isSource() && hasAnonymousUse()
  to ClassInstanceExpr.anonymousUses() for enclosingClassInstanceExpr();
  syn boolean VarAccess.hasAnonymousUse() = hasEnclosingClassInstanceExpr() &&
                                            decl().isLocalVariable() &&
                                            decl().hostType() != hostType();
  inh ClassInstanceExpr VarAccess.enclosingClassInstanceExpr();
  syn boolean VarAccess.hasEnclosingClassInstanceExpr() =
      enclosingClassInstanceExpr() != null;
  eq ClassInstanceExpr.getTypeDecl().enclosingClassInstanceExpr() = this;
  eq Program.getChild().enclosingClassInstanceExpr() = null;

  coll Set<BodyDecl> CompilationUnit.methods()[new HashSet()] with add root
      CompilationUnit;
  BodyDecl contributes this to CompilationUnit.methods() for getCompUnit();

  inh CompilationUnit BodyDecl.getCompUnit();
  eq CompilationUnit.getChild().getCompUnit() = this;
  eq Program.getChild().getCompUnit() = null;
  /*
          // hasAssigns

          syn lazy boolean Stmt.hasAssigns();

          eq Stmt.hasAssigns() = !def().isEmpty();

          // BitSet<Variable>
          coll BitSet Stmt.def() [emptyBitSet().mutable()]
                  with add root Stmt;

          VarAccess contributes decl()
                  when isDest() //&& assignIsAlwaysReached() &&
     !assignMayBeAbrupted() to Stmt.def() for enclosingCFGStmt();
          VariableDeclaration contributes this
                  //when !hasInit() || hasInit() && !assignMayBeAbrupted()
                  to Stmt.def() for this;
          ParameterDeclaration contributes this
                  to Stmt.def() for enclosingCFGStmt();


          // emptySmallSet

          syn lazy SmallSet BodyDecl.emptySmallSet() = SmallSet.empty();

          inh lazy SmallSet Stmt.emptySmallSet();
          inh lazy SmallSet Expr.emptySmallSet();
          eq Program.getChild().emptySmallSet() = SmallSet.empty();
          eq BodyDecl.getChild().emptySmallSet() = emptySmallSet();


          // emptyBitSet

          syn lazy BitSet BodyDecl.emptyBitSet() = new BitSet();
          syn lazy BitSet TypeDecl.emptyBitSet() = new BitSet();

          inh lazy BitSet Stmt.emptyBitSet();
          inh lazy BitSet ClassInstanceExpr.emptyBitSet();
          inh lazy BitSet ParameterDeclaration.emptyBitSet();
          inh lazy BitSet VarAccess.emptyBitSet();
          eq Program.getChild().emptyBitSet() {
                  throw new UnsupportedOperationException();
          }
          eq TypeDecl.getChild().emptyBitSet() = emptyBitSet();
          eq BodyDecl.getChild().emptyBitSet() = emptyBitSet();



          // We want variables used in an anonymous class to be included
     in the use set
          // of its enclosing class instance expression.
          coll BitSet ClassInstanceExpr.anonymousUses()
     [emptyBitSet().mutable()] with add root Program; VarAccess
     contributes decl() when isSource() && hasAnonymousUse() to
     ClassInstanceExpr.anonymousUses() for enclosingClassInstanceExpr();
          syn boolean VarAccess.hasAnonymousUse() =
     hasEnclosingClassInstanceExpr() && decl().isLocalVariable() &&
     decl().hostType() != hostType(); inh ClassInstanceExpr
     VarAccess.enclosingClassInstanceExpr(); syn boolean
     VarAccess.hasEnclosingClassInstanceExpr() =
     enclosingClassInstanceExpr() != null; eq
     ClassInstanceExpr.getTypeDecl().enclosingClassInstanceExpr() = this;
          eq Program.getChild().enclosingClassInstanceExpr() = null;


          // We need to be sure that a variable is assigned in a stmt.
          // Adding these equations to exclude assignments which may be
     interrupted
          // by an exception.
          inh boolean VarAccess.assignMayBeAbrupted();
          eq ExprStmt.getChild().assignMayBeAbrupted() =
     assignMayBeAbrupted(); eq Program.getChild().assignMayBeAbrupted() =
     false; syn boolean Stmt.assignMayBeAbrupted() =
     !abruptingCalls().isEmpty(); coll BitSet Stmt.abruptingCalls()
     [emptyBitSet().mutable()] with add root BodyDecl; MethodAccess
     contributes this when decl().getNumException() > 0 &&
     !enclosingCFGStmt().exitAsSucc() to Stmt.abruptingCalls() for
     enclosingCFGStmt(); ClassInstanceExpr contributes this when
     decl().getNumException() > 0 && !enclosingCFGStmt().exitAsSucc() to
     Stmt.abruptingCalls() for enclosingCFGStmt(); ConstructorAccess
     contributes this when decl().getNumException() > 0 &&
     !enclosingCFGStmt().exitAsSucc() to Stmt.abruptingCalls() for
     enclosingCFGStmt(); syn boolean Stmt.exitAsSucc() =
     succ().contains(exit());

          // For some statements and expressions there may be assignments
     which won't be reached
          // For example, in a logical expression the right child may not
     be reached if the other
          // operand is true (for OR) or false (for AND).
          inh boolean VarAccess.assignIsAlwaysReached();
          eq Program.getChild().assignIsAlwaysReached() = true;
          eq LogicalExpr.getRightOperand().assignIsAlwaysReached() =
     false; eq BitwiseExpr.getRightOperand().assignIsAlwaysReached() =
     false; eq ConditionalExpr.getTrueExpr().assignIsAlwaysReached() =
     false; eq ConditionalExpr.getFalseExpr().assignIsAlwaysReached() =
     false; eq AssertStmt.getExpr().assignIsAlwaysReached() = false;


          // isBreakStmt

          syn boolean Stmt.isBreakStmt() = false;
          eq BreakStmt.isBreakStmt() = true;

          // isContinueStmt

          syn boolean Stmt.isContinueStmt() = false;
          eq ContinueStmt.isContinueStmt() = true;

          // isReturnStmt

          syn boolean Stmt.isReturnStmt() = false;
          eq ReturnStmt.isReturnStmt() = true;

          // isThrowStmt
          syn boolean Stmt.isThrowStmt() = false;
          eq ThrowStmt.isThrowStmt() = true;

          // isDefaultCase

          syn boolean Stmt.isDefaultCase() = false;
          eq DefaultCase.isDefaultCase() = true;
  */
}
